// generated by Fast Light User Interface Designer (fluid) version 1.0305

#include "LABChecker_GUI.h"
#include "LABChecker_Controller.h"

Fl_Menu_Item LABChecker_GUI::menu_[] = {
 {"File", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Exit", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Settings", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABChecker_GUI::cb_digital_fl_choice_input_bits_i(Fl_Choice* o, void* v) {
  m_LABChecker_Controller->cb_digital_input_bits (o, v);
}
void LABChecker_GUI::cb_digital_fl_choice_input_bits(Fl_Choice* o, void* v) {
  ((LABChecker_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_digital_fl_choice_input_bits_i(o,v);
}

Fl_Menu_Item LABChecker_GUI::menu_digital_fl_choice_input_bits[] = {
 {"1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"6", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"7", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABChecker_GUI::cb_digital_fl_choice_output_bits_i(Fl_Choice* o, void* v) {
  m_LABChecker_Controller->cb_digital_output_bits (o, v);
}
void LABChecker_GUI::cb_digital_fl_choice_output_bits(Fl_Choice* o, void* v) {
  ((LABChecker_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_digital_fl_choice_output_bits_i(o,v);
}

Fl_Menu_Item LABChecker_GUI::menu_digital_fl_choice_output_bits[] = {
 {"1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"6", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"7", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABChecker_GUI::cb_digital_fl_input_output_count_i(Fl_Input* o, void* v) {
  m_LABChecker_Controller->cb_digital_output_count (o, v);
}
void LABChecker_GUI::cb_digital_fl_input_output_count(Fl_Input* o, void* v) {
  ((LABChecker_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_digital_fl_input_output_count_i(o,v);
}

void LABChecker_GUI::cb_digital_fl_button_create_file_i(Fl_Button* o, void* v) {
  m_LABChecker_Controller->cb_digital_create_file (o, v);
}
void LABChecker_GUI::cb_digital_fl_button_create_file(Fl_Button* o, void* v) {
  ((LABChecker_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_digital_fl_button_create_file_i(o,v);
}

LABChecker_GUI::LABChecker_GUI() {
  { main_fl_window = new Fl_Double_Window(1365, 765, "LABChecker 0.1");
    main_fl_window->color(FL_LIGHT2);
    main_fl_window->user_data((void*)(this));
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 1366, 30);
      o->box(FL_FLAT_BOX);
      o->color(FL_LIGHT3);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { Fl_Tabs* o = new Fl_Tabs(0, 30, 1366, 738);
      o->box(FL_FLAT_BOX);
      o->color(FL_LIGHT3);
      o->selection_color(FL_LIGHT3);
      { Fl_Group* o = new Fl_Group(0, 60, 1366, 708, "Analog - Simple DC");
        o->box(FL_FLAT_BOX);
        o->color(FL_LIGHT3);
        o->selection_color(FL_LIGHT3);
        o->hide();
        o->deactivate();
        { Fl_Group* o = new Fl_Group(398, 155, 180, 350, "Input");
          o->box(FL_ROUNDED_FRAME);
          { simple_dc_fl_input_choice_dc_output = new Fl_Input_Choice(428, 205, 120, 25, "DC Output");
            simple_dc_fl_input_choice_dc_output->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Input_Choice* simple_dc_fl_input_choice_dc_output
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(793, 150, 180, 350, "Output");
          o->box(FL_ROUNDED_FRAME);
          { simple_dc_fl_input_choice_dc_input = new Fl_Input_Choice(823, 205, 120, 25, "Expected DC Input");
            simple_dc_fl_input_choice_dc_input->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Input_Choice* simple_dc_fl_input_choice_dc_input
          { simple_dc_fl_input_choice_samples = new Fl_Input_Choice(823, 275, 120, 25, "Samples");
            simple_dc_fl_input_choice_samples->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Input_Choice* simple_dc_fl_input_choice_samples
          { simple_dc_fl_input_choice_sampling_rate = new Fl_Input_Choice(823, 345, 120, 25, "Sampling Rate");
            simple_dc_fl_input_choice_sampling_rate->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Input_Choice* simple_dc_fl_input_choice_sampling_rate
          { simple_dc_fl_input_choice_base = new Fl_Input_Choice(823, 415, 120, 25, "Base");
            simple_dc_fl_input_choice_base->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Input_Choice* simple_dc_fl_input_choice_base
          o->end();
        } // Fl_Group* o
        { simple_dc_fl_button_create_file = new Fl_Button(608, 555, 150, 60, "Create File");
          simple_dc_fl_button_create_file->box(FL_GTK_UP_BOX);
          simple_dc_fl_button_create_file->color((Fl_Color)55);
        } // Fl_Button* simple_dc_fl_button_create_file
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 60, 1366, 708, "Digital");
        o->box(FL_FLAT_BOX);
        o->color(FL_LIGHT3);
        { Fl_Group* o = new Fl_Group(60, 120, 180, 240, "Settings");
          o->box(FL_ROUNDED_FRAME);
          { digital_fl_choice_input_bits = new Fl_Choice(90, 155, 120, 30, "Input Bits");
            digital_fl_choice_input_bits->down_box(FL_BORDER_BOX);
            digital_fl_choice_input_bits->callback((Fl_Callback*)cb_digital_fl_choice_input_bits);
            digital_fl_choice_input_bits->align(Fl_Align(FL_ALIGN_TOP));
            digital_fl_choice_input_bits->menu(menu_digital_fl_choice_input_bits);
          } // Fl_Choice* digital_fl_choice_input_bits
          { // 		
            digital_fl_choice_output_bits = new Fl_Choice(90, 225, 120, 30, "Output Bits");
            digital_fl_choice_output_bits->down_box(FL_BORDER_BOX);
            digital_fl_choice_output_bits->callback((Fl_Callback*)cb_digital_fl_choice_output_bits);
            digital_fl_choice_output_bits->align(Fl_Align(FL_ALIGN_TOP));
            digital_fl_choice_output_bits->menu(menu_digital_fl_choice_output_bits);
          } // Fl_Choice* digital_fl_choice_output_bits
          { digital_fl_input_output_count = new Fl_Input(90, 300, 120, 30, "Outputs (Max 2)");
            digital_fl_input_output_count->callback((Fl_Callback*)cb_digital_fl_input_output_count);
            digital_fl_input_output_count->align(Fl_Align(FL_ALIGN_TOP));
            digital_fl_input_output_count->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
          } // Fl_Input* digital_fl_input_output_count
          o->end();
        } // Fl_Group* o
        { digital_fl_button_create_file = new Fl_Button(608, 650, 150, 60, "Create File");
          digital_fl_button_create_file->box(FL_GTK_UP_BOX);
          digital_fl_button_create_file->color((Fl_Color)55);
          digital_fl_button_create_file->callback((Fl_Callback*)cb_digital_fl_button_create_file);
        } // Fl_Button* digital_fl_button_create_file
        { digital_labchecker_gui_digital_input_table_table = new LABChecker_GUI_Digital_Input_Table(290, 118, 1020, 500, "Outputs");
          digital_labchecker_gui_digital_input_table_table->box(FL_THIN_DOWN_FRAME);
          digital_labchecker_gui_digital_input_table_table->color((Fl_Color)51);
          digital_labchecker_gui_digital_input_table_table->selection_color((Fl_Color)53);
          digital_labchecker_gui_digital_input_table_table->labeltype(FL_NORMAL_LABEL);
          digital_labchecker_gui_digital_input_table_table->labelfont(0);
          digital_labchecker_gui_digital_input_table_table->labelsize(14);
          digital_labchecker_gui_digital_input_table_table->labelcolor(FL_FOREGROUND_COLOR);
          digital_labchecker_gui_digital_input_table_table->align(Fl_Align(FL_ALIGN_TOP));
          digital_labchecker_gui_digital_input_table_table->when(FL_WHEN_RELEASE);
          digital_labchecker_gui_digital_input_table_table->end();
        } // LABChecker_GUI_Digital_Input_Table* digital_labchecker_gui_digital_input_table_table
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    main_fl_window->end();
  } // Fl_Double_Window* main_fl_window
}
