// generated by Fast Light User Interface Designer (fluid) version 1.0305

#include "LABSoft_GUI.h"

void LABSoft_GUI::cb_oscilloscope_light_button_enable_disable_i(Fl_Light_Button* o, void* v) {
  m_LAB->m_LAB_Oscilloscope->LAB_Oscilloscope_cb_oscilloscope_fl_light_button_enable_disable(o, v);
}
void LABSoft_GUI::cb_oscilloscope_light_button_enable_disable(Fl_Light_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_oscilloscope_light_button_enable_disable_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_input_choice_horizontal_position[] = {
 {"1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_input_choice_horizontal_seconds_division[] = {
 {"1000 s/div (MAX)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 us/div (MIN)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_input_choice_vertical_offset[] = {
 {"1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_input_choice_vertical_volts_division[] = {
 {"1000 s/div (MAX)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 us/div (MIN)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_[] = {
 {"V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 60, 0},
 {"mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 60, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_1[] = {
 {"mA", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 60, 0},
 {"A", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 60, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_2[] = {
 {"Ohm", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 60, 0},
 {"MegaOhm", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 60, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_light_button_start_stop_i(Fl_Light_Button* o, void*) {
  m_LAB->m_LAB_Function_Generator->LAB_Function_Generator_cb_function_generator_fl_light_button_start_stop (o, function_generator_fl_box_function_generator_display);
}
void LABSoft_GUI::cb_function_generator_fl_light_button_start_stop(Fl_Light_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_light_button_start_stop_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_horizontal_position[] = {
 {"1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_time_per_division[] = {
 {"1000 s/div (MAX)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 us/div (MIN)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_vertical_offset[] = {
 {"1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_volts_per_division[] = {
 {"1000 s/div (MAX)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 us/div (MIN)", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_wave_type_i(Fl_Input_Choice* o, void*) {
  m_LAB->LAB_Function_Generator->LAB_Function_Generator_cb_function_generator_fl_input_choice_wave_type (o, function_generator_fl_box_function_generator_display);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_wave_type(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_wave_type_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_wave_type[] = {
 {"Sine", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Square", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Triangular", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_frequency_i(Fl_Input_Choice* o, void*) {
  m_LAB->m_LAB_Function_Generator->LAB_Function_Generator_cb_function_generator_fl_input_choice_frequency (o, {&function_generator_fl_box_function_generator_display, &function_generator_fl_input_choice_period, &function_generator_fl_input_choice_frequency});
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_frequency(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_frequency_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_frequency[] = {
 {"1 MHz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 kHz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 kHz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 kHz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 kHz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 kHz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 kHz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 kHz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 kHz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 kHz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 Hz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 Hz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 Hz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 Hz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 Hz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 Hz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 Hz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 Hz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 Hz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 mHz", 0,  0, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_period_i(Fl_Input_Choice* o, void*) {
  m_LAB->m_LAB_Function_Generator->LAB_Function_Generator_cb_function_generator_fl_input_choice_period (o, function_generator_fl_box_oscilloscope);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_period(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_period_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_period[] = {
 {"5 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_amplitude_i(Fl_Input_Choice* o, void*) {
  m_LAB->m_LAB_Function_Generator->LAB_Function_Generator_cb_function_generator_fl_input_choice_amplitude (o, function_generator_fl_box_function_generator_display);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_amplitude(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_amplitude_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_amplitude[] = {
 {"5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_Offset[] = {
 {"5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

LABSoft_GUI::LABSoft_GUI(int argc, char** argv, LAB *_LAB) {
  m_LAB = _LAB;
  { fl_window_main = new Fl_Double_Window(1200, 600, "LABSoft v0.1a");
    fl_window_main->user_data((void*)(this));
    { Fl_Tabs* o = new Fl_Tabs(0, 0, 1500, 640);
      { Fl_Group* o = new Fl_Group(0, 35, 1200, 565, "Home");
        o->hide();
        { Fl_Box* o = new Fl_Box(582, 314, 35, 17, "LABSoft v0.1a");
          o->labelsize(60);
          o->labelcolor(FL_DARK1);
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1260, 635, "Oscilloscope");
        o->hide();
        { oscilloscope_light_button_enable_disable = new Fl_Light_Button(1045, 70, 120, 60, "Disabled");
          oscilloscope_light_button_enable_disable->callback((Fl_Callback*)cb_oscilloscope_light_button_enable_disable);
          oscilloscope_light_button_enable_disable->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* oscilloscope_light_button_enable_disable
        { oscilloscope_fl_group_horizontal = new Fl_Group(25, 65, 1230, 472);
          { oscilloscope_fl_box_horizontal_box = new Fl_Box(675, 290, 200, 150, "Horizontal");
            oscilloscope_fl_box_horizontal_box->box(FL_ROUNDED_BOX);
            oscilloscope_fl_box_horizontal_box->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Box* oscilloscope_fl_box_horizontal_box
          { oscilloscope_fl_input_choice_horizontal_position = new Fl_Input_Choice(700, 323, 150, 25, "Position");
            oscilloscope_fl_input_choice_horizontal_position->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_input_choice_horizontal_position->menu(menu_oscilloscope_fl_input_choice_horizontal_position);
            oscilloscope_fl_input_choice_horizontal_position->value("0 s");
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_horizontal_position
          { oscilloscope_fl_input_choice_horizontal_seconds_division = new Fl_Input_Choice(700, 386, 150, 25, "Seconds per Division");
            oscilloscope_fl_input_choice_horizontal_seconds_division->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_input_choice_horizontal_seconds_division->menu(menu_oscilloscope_fl_input_choice_horizontal_seconds_division);
            oscilloscope_fl_input_choice_horizontal_seconds_division->value("1 s/div");
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_horizontal_seconds_division
          oscilloscope_fl_group_horizontal->end();
        } // Fl_Group* oscilloscope_fl_group_horizontal
        { oscilloscope_fl_group_vertical = new Fl_Group(40, 80, 1220, 462);
          { oscilloscope_fl_box_vertical_box = new Fl_Box(675, 95, 200, 150, "Vertical");
            oscilloscope_fl_box_vertical_box->box(FL_ROUNDED_BOX);
            oscilloscope_fl_box_vertical_box->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Box* oscilloscope_fl_box_vertical_box
          { oscilloscope_fl_input_choice_vertical_offset = new Fl_Input_Choice(700, 128, 150, 25, "Offset");
            oscilloscope_fl_input_choice_vertical_offset->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_input_choice_vertical_offset->menu(menu_oscilloscope_fl_input_choice_vertical_offset);
            oscilloscope_fl_input_choice_vertical_offset->value("0 s");
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_vertical_offset
          { oscilloscope_fl_input_choice_vertical_volts_division = new Fl_Input_Choice(700, 191, 150, 25, "Volts per Division");
            oscilloscope_fl_input_choice_vertical_volts_division->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_input_choice_vertical_volts_division->menu(menu_oscilloscope_fl_input_choice_vertical_volts_division);
            oscilloscope_fl_input_choice_vertical_volts_division->value("1 s/div");
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_vertical_volts_division
          oscilloscope_fl_group_vertical->end();
        } // Fl_Group* oscilloscope_fl_group_vertical
        { oscilloscope_fl_group_display = new Fl_Group(0, 0, 635, 550);
          { oscilloscope_fl_box_oscilloscope_display = new LABSoft_Oscilloscope_Display(35, 70, 600, 480);
            oscilloscope_fl_box_oscilloscope_display->box(FL_FLAT_BOX);
            oscilloscope_fl_box_oscilloscope_display->color(FL_YELLOW);
            oscilloscope_fl_box_oscilloscope_display->selection_color(FL_BACKGROUND_COLOR);
            oscilloscope_fl_box_oscilloscope_display->labeltype(FL_NO_LABEL);
            oscilloscope_fl_box_oscilloscope_display->labelfont(0);
            oscilloscope_fl_box_oscilloscope_display->labelsize(14);
            oscilloscope_fl_box_oscilloscope_display->labelcolor(FL_FOREGROUND_COLOR);
            oscilloscope_fl_box_oscilloscope_display->align(Fl_Align(FL_ALIGN_CENTER));
            oscilloscope_fl_box_oscilloscope_display->when(FL_WHEN_RELEASE);
          } // LABSoft_Oscilloscope_Display* oscilloscope_fl_box_oscilloscope_display
          oscilloscope_fl_group_display->end();
        } // Fl_Group* oscilloscope_fl_group_display
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1200, 565, "Voltmeter");
        o->hide();
        { voltmeter_fl_value_output_reading = new Fl_Value_Output(337, 150, 320, 120);
          voltmeter_fl_value_output_reading->labelsize(100);
          voltmeter_fl_value_output_reading->maximum(100);
          voltmeter_fl_value_output_reading->step(0.001);
          voltmeter_fl_value_output_reading->textsize(100);
          voltmeter_fl_value_output_reading->align(Fl_Align(FL_ALIGN_TOP));
        } // Fl_Value_Output* voltmeter_fl_value_output_reading
        { Fl_Choice* o = new Fl_Choice(662, 150, 240, 120);
          o->down_box(FL_BORDER_BOX);
          o->textsize(100);
          o->menu(menu_);
        } // Fl_Choice* o
        { voltmeter_fl_light_button_enable_disable = new Fl_Light_Button(450, 342, 320, 60, "Disabled");
          voltmeter_fl_light_button_enable_disable->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* voltmeter_fl_light_button_enable_disable
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1200, 565, "Ammeter");
        o->hide();
        { ammeter_fl_value_output_reading = new Fl_Value_Output(337, 150, 320, 120);
          ammeter_fl_value_output_reading->labelsize(100);
          ammeter_fl_value_output_reading->maximum(100);
          ammeter_fl_value_output_reading->step(0.001);
          ammeter_fl_value_output_reading->textsize(100);
          ammeter_fl_value_output_reading->align(Fl_Align(FL_ALIGN_TOP));
        } // Fl_Value_Output* ammeter_fl_value_output_reading
        { Fl_Choice* o = new Fl_Choice(662, 150, 240, 120);
          o->down_box(FL_BORDER_BOX);
          o->textsize(100);
          o->menu(menu_1);
        } // Fl_Choice* o
        { ammeter_fl_light_button_enable_disable = new Fl_Light_Button(450, 342, 320, 60, "Disabled");
          ammeter_fl_light_button_enable_disable->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* ammeter_fl_light_button_enable_disable
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1200, 565, "Ohmmeter");
        o->hide();
        { ohmmeter_fl_value_output_reading = new Fl_Value_Output(337, 150, 320, 120);
          ohmmeter_fl_value_output_reading->labelsize(100);
          ohmmeter_fl_value_output_reading->maximum(100);
          ohmmeter_fl_value_output_reading->step(0.001);
          ohmmeter_fl_value_output_reading->textsize(100);
          ohmmeter_fl_value_output_reading->align(Fl_Align(FL_ALIGN_TOP));
        } // Fl_Value_Output* ohmmeter_fl_value_output_reading
        { Fl_Choice* o = new Fl_Choice(662, 150, 240, 120);
          o->down_box(FL_BORDER_BOX);
          o->textsize(100);
          o->menu(menu_2);
        } // Fl_Choice* o
        { ohmmeter_fl_light_button_enable_disable = new Fl_Light_Button(450, 342, 320, 60, "Disabled");
          ohmmeter_fl_light_button_enable_disable->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* ohmmeter_fl_light_button_enable_disable
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1500, 615, "Function Generator");
        { function_generator_fl_light_button_start_stop = new Fl_Light_Button(1045, 70, 120, 60, "Stopped");
          function_generator_fl_light_button_start_stop->callback((Fl_Callback*)cb_function_generator_fl_light_button_start_stop);
          function_generator_fl_light_button_start_stop->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* function_generator_fl_light_button_start_stop
        { Fl_Group* o = new Fl_Group(25, 25, 610, 525);
          { function_generator_fl_box_function_generator_display = new LABSoft_Function_Generator_Display(35, 70, 600, 480);
            function_generator_fl_box_function_generator_display->box(FL_FLAT_BOX);
            function_generator_fl_box_function_generator_display->color(FL_YELLOW);
            function_generator_fl_box_function_generator_display->selection_color(FL_BACKGROUND2_COLOR);
            function_generator_fl_box_function_generator_display->labeltype(FL_NO_LABEL);
            function_generator_fl_box_function_generator_display->labelfont(0);
            function_generator_fl_box_function_generator_display->labelsize(14);
            function_generator_fl_box_function_generator_display->labelcolor(FL_FOREGROUND_COLOR);
            function_generator_fl_box_function_generator_display->align(Fl_Align(FL_ALIGN_CENTER));
            function_generator_fl_box_function_generator_display->when(FL_WHEN_RELEASE);
          } // LABSoft_Function_Generator_Display* function_generator_fl_box_function_generator_display
          o->end();
        } // Fl_Group* o
        { function_generator_fl_group_horizontal = new Fl_Group(225, 153, 1230, 472);
          { Fl_Box* o = new Fl_Box(875, 378, 200, 150, "Horizontal");
            o->box(FL_ROUNDED_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Box* o
          { function_generator_fl_input_choice_horizontal_position = new Fl_Input_Choice(900, 411, 150, 25, "Position");
            function_generator_fl_input_choice_horizontal_position->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_horizontal_position->menu(menu_function_generator_fl_input_choice_horizontal_position);
          } // Fl_Input_Choice* function_generator_fl_input_choice_horizontal_position
          { function_generator_fl_input_choice_time_per_division = new Fl_Input_Choice(900, 474, 150, 25, "Time per Division");
            function_generator_fl_input_choice_time_per_division->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_time_per_division->when(FL_WHEN_CHANGED);
            function_generator_fl_input_choice_time_per_division->menu(menu_function_generator_fl_input_choice_time_per_division);
          } // Fl_Input_Choice* function_generator_fl_input_choice_time_per_division
          function_generator_fl_group_horizontal->end();
        } // Fl_Group* function_generator_fl_group_horizontal
        { function_generator_fl_group_vertical = new Fl_Group(240, 168, 1220, 462);
          { Fl_Box* o = new Fl_Box(875, 183, 200, 150, "Vertical");
            o->box(FL_ROUNDED_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Box* o
          { function_generator_fl_input_choice_vertical_offset = new Fl_Input_Choice(900, 216, 150, 25, "Offset");
            function_generator_fl_input_choice_vertical_offset->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_vertical_offset->menu(menu_function_generator_fl_input_choice_vertical_offset);
          } // Fl_Input_Choice* function_generator_fl_input_choice_vertical_offset
          { function_generator_fl_input_choice_volts_per_division = new Fl_Input_Choice(900, 279, 150, 25, "Volts per Division");
            function_generator_fl_input_choice_volts_per_division->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_volts_per_division->menu(menu_function_generator_fl_input_choice_volts_per_division);
          } // Fl_Input_Choice* function_generator_fl_input_choice_volts_per_division
          function_generator_fl_group_vertical->end();
        } // Fl_Group* function_generator_fl_group_vertical
        { function_generator_fl_group_function_generator_parameters = new Fl_Group(0, 0, 100, 100);
          { function_generator_fl_input_choice_wave_type = new Fl_Input_Choice(705, 91, 120, 40, "Wave Type");
            function_generator_fl_input_choice_wave_type->callback((Fl_Callback*)cb_function_generator_fl_input_choice_wave_type);
            function_generator_fl_input_choice_wave_type->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_wave_type->menu(menu_function_generator_fl_input_choice_wave_type);
            function_generator_fl_input_choice_wave_type->value("Sine");
          } // Fl_Input_Choice* function_generator_fl_input_choice_wave_type
          { function_generator_fl_input_choice_frequency = new Fl_Input_Choice(705, 191, 120, 40, "Frequency");
            function_generator_fl_input_choice_frequency->callback((Fl_Callback*)cb_function_generator_fl_input_choice_frequency);
            function_generator_fl_input_choice_frequency->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_frequency->menu(menu_function_generator_fl_input_choice_frequency);
          } // Fl_Input_Choice* function_generator_fl_input_choice_frequency
          { function_generator_fl_input_choice_period = new Fl_Input_Choice(705, 291, 120, 40, "Period");
            function_generator_fl_input_choice_period->callback((Fl_Callback*)cb_function_generator_fl_input_choice_period);
            function_generator_fl_input_choice_period->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_period->menu(menu_function_generator_fl_input_choice_period);
          } // Fl_Input_Choice* function_generator_fl_input_choice_period
          { function_generator_fl_input_choice_amplitude = new Fl_Input_Choice(705, 391, 120, 40, "Amplitude");
            function_generator_fl_input_choice_amplitude->callback((Fl_Callback*)cb_function_generator_fl_input_choice_amplitude);
            function_generator_fl_input_choice_amplitude->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_amplitude->menu(menu_function_generator_fl_input_choice_amplitude);
          } // Fl_Input_Choice* function_generator_fl_input_choice_amplitude
          { Fl_Input_Choice* o = new Fl_Input_Choice(705, 491, 120, 40, "Offset");
            o->align(Fl_Align(FL_ALIGN_TOP));
            o->menu(menu_Offset);
          } // Fl_Input_Choice* o
          function_generator_fl_group_function_generator_parameters->end();
        } // Fl_Group* function_generator_fl_group_function_generator_parameters
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1200, 565, "Logic Analyzer");
        o->hide();
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1200, 565, "Power Supply");
        o->hide();
        { power_supply_fl_light_button_enable_disable = new Fl_Light_Button(440, 332, 320, 60, "Disabled");
          power_supply_fl_light_button_enable_disable->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* power_supply_fl_light_button_enable_disable
        { Fl_Value_Slider* o = new Fl_Value_Slider(200, 200, 900, 60);
          o->type(1);
          o->minimum(0.5);
          o->maximum(5);
          o->value(0.5);
          o->slider_size(0.01);
          o->textsize(14);
        } // Fl_Value_Slider* o
        { Fl_Input_Choice* o = new Fl_Input_Choice(136, 200, 100, 60, "Voltage");
          o->align(Fl_Align(FL_ALIGN_TOP));
        } // Fl_Input_Choice* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1200, 565, "Circuit Checker");
        o->hide();
        { circuit_checker_fl_button_start = new Fl_Button(874, 143, 180, 360, "Start Circuit Checking");
        } // Fl_Button* circuit_checker_fl_button_start
        { Fl_File_Browser* o = new Fl_File_Browser(76, 142, 180, 360, "Step 1: Choose a Circuit Checker Configuration File");
          o->align(Fl_Align(129));
        } // Fl_File_Browser* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1200, 565, "Settings");
        o->hide();
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    fl_window_main->end();
  } // Fl_Double_Window* fl_window_main
  fl_window_main->show(argc, argv);
}

LABSoft_GUI::~LABSoft_GUI() {
}
