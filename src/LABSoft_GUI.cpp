// generated by Fast Light User Interface Designer (fluid) version 1.0305

#include "LABSoft_GUI.h"
#include "LABSoft_Controller.h"

void LABSoft_GUI::cb_voltmeter_fl_choice_unit_i(Fl_Choice* o, void*) {
  m_LAB->m_LAB_Voltmeter->LAB_Meter_cb_fl_choice_unit (o, voltmeter_fl_output_value);
}
void LABSoft_GUI::cb_voltmeter_fl_choice_unit(Fl_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_voltmeter_fl_choice_unit_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_voltmeter_fl_choice_unit[] = {
 {"V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 72, 0},
 {"mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 72, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_voltmeter_fl_light_button_run_stop_i(Fl_Light_Button* o, void* v) {
  m_LABSoft_Controller->m_LABSoft_Controller_Voltmeter->LABSoft_Controller_Voltmeter_cb_fl_light_button_start_stop (o, v);
}
void LABSoft_GUI::cb_voltmeter_fl_light_button_run_stop(Fl_Light_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_voltmeter_fl_light_button_run_stop_i(o,v);
}

void LABSoft_GUI::cb_voltmeter_fl_light_button_generate_random_values_i(Fl_Light_Button* o, void* v) {
  m_LABSoft_Controller->m_LABSoft_Controller_Voltmeter->LABSoft_Controller_Voltmeter_cb_fl_light_button_generate_random_values (o, v);
}
void LABSoft_GUI::cb_voltmeter_fl_light_button_generate_random_values(Fl_Light_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_voltmeter_fl_light_button_generate_random_values_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_ammeter_fl_choice_unit[] = {
 {"A", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 72, 0},
 {"mA", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 72, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_ohmmeter_fl_choice_unit[] = {
 {"M\316\251", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 72, 0},
 {"k\316\251", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 72, 0},
 {"\316\251", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 72, 0},
 {"m\316\251", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 72, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_light_button_start_stop_i(Fl_Light_Button* o, void*) {
  m_LAB->m_LAB_Function_Generator->LAB_Function_Generator_cb_function_generator_fl_light_button_start_stop (o, function_generator_labsoft_oscilloscope_display_group_display);
}
void LABSoft_GUI::cb_function_generator_fl_light_button_start_stop(Fl_Light_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_light_button_start_stop_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_horizontal_position[] = {
 {"1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_time_per_division_i(Fl_Input_Choice* o, void*) {
  m_LAB->m_LAB_Function_Generator->LAB_Function_Generator_cb_function_generator_fl_input_choice_time_per_division (o, function_generator_labsoft_oscilloscope_display_group_display);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_time_per_division(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_time_per_division_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_time_per_division[] = {
 {"50 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 us/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 us/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 us/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_vertical_offset[] = {
 {"1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_volts_per_division_i(Fl_Input_Choice* o, void*) {
  m_LAB->m_LAB_Function_Generator->LAB_Function_Generator_cb_function_generator_fl_input_choice_volts_per_division (o, function_generator_labsoft_oscilloscope_display_group_display);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_volts_per_division(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_volts_per_division_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_volts_per_division[] = {
 {"5 V/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 mV/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 mV/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_wave_type_i(Fl_Input_Choice* o, void*) {
  m_LAB->m_LAB_Function_Generator->LAB_Function_Generator_cb_function_generator_fl_input_choice_wave_type (o, function_generator_labsoft_oscilloscope_display_group_display);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_wave_type(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_wave_type_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_wave_type[] = {
 {"Sine", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Square", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Triangular", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"DC", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_frequency_i(Fl_Input_Choice* o, void*) {
  m_LAB->m_LAB_Function_Generator->LAB_Function_Generator_cb_function_generator_fl_input_choice_frequency (o, function_generator_labsoft_oscilloscope_display_group_display);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_frequency(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_frequency_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_frequency[] = {
 {"1 MHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 mHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_period_i(Fl_Input_Choice* o, void*) {
  m_LAB->m_LAB_Function_Generator->LAB_Function_Generator_cb_function_generator_fl_input_choice_period (o, function_generator_labsoft_oscilloscope_display_group_display->disp());
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_period(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_period_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_period[] = {
 {"5 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_amplitude_i(Fl_Input_Choice* o, void*) {
  m_LAB->m_LAB_Function_Generator->LAB_Function_Generator_cb_function_generator_fl_input_choice_amplitude (o, function_generator_labsoft_oscilloscope_display_group_display);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_amplitude(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_amplitude_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_amplitude[] = {
 {"5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_offset_i(Fl_Input_Choice* o, void*) {
  m_LAB->m_LAB_Function_Generator->LAB_Function_Generator_cb_function_generator_fl_input_choice_offset (o, function_generator_labsoft_oscilloscope_display_group_display->disp());
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_offset(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_offset_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_offset[] = {
 {"5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_duty_cycle[] = {
 {"5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_phase_i(Fl_Input_Choice* o, void*) {
  m_LAB->m_LAB_Function_Generator->LAB_Function_Generator_cb_function_generator_fl_input_choice_phase (o, function_generator_labsoft_oscilloscope_display_group_display);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_phase(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_phase_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_phase[] = {
 {"-360 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-180 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-90 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-45 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-30 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+30 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+45 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+60 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+90 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+180 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+360 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_power_supply_fl_light_button_positive_12_volts_i(Fl_Light_Button* o, void* v) {
  m_LAB->m_LAB_Power_Supply->LAB_Power_Supply_cb_power_supply_fl_light_button_positive_12_volts (o, v);
}
void LABSoft_GUI::cb_power_supply_fl_light_button_positive_12_volts(Fl_Light_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_power_supply_fl_light_button_positive_12_volts_i(o,v);
}

void LABSoft_GUI::cb_power_supply_fl_light_button_negative_12_volts_i(Fl_Light_Button* o, void* v) {
  m_LAB->m_LAB_Power_Supply->LAB_Power_Supply_cb_power_supply_fl_light_button_negative_12_volts (o, v);
}
void LABSoft_GUI::cb_power_supply_fl_light_button_negative_12_volts(Fl_Light_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_power_supply_fl_light_button_negative_12_volts_i(o,v);
}

void LABSoft_GUI::cb_power_supply_fl_light_button_positive_5_volts_i(Fl_Light_Button* o, void* v) {
  m_LAB->m_LAB_Power_Supply->LAB_Power_Supply_cb_power_supply_fl_light_button_positive_5_volts (o, v);
}
void LABSoft_GUI::cb_power_supply_fl_light_button_positive_5_volts(Fl_Light_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_power_supply_fl_light_button_positive_5_volts_i(o,v);
}

void LABSoft_GUI::cb_power_supply_fl_light_button_master_enable_disable_i(Fl_Light_Button* o, void* v) {
  m_LAB->m_LAB_Power_Supply->LAB_Power_Supply_cb_power_supply_fl_light_button_master_enable_disable (o, v);
}
void LABSoft_GUI::cb_power_supply_fl_light_button_master_enable_disable(Fl_Light_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_power_supply_fl_light_button_master_enable_disable_i(o,v);
}

LABSoft_GUI::LABSoft_GUI() {
  { main_fl_window = new Fl_Double_Window(1366, 768, "LABSoft v0.1a");
    main_fl_window->user_data((void*)(this));
    { Fl_Tabs* o = new Fl_Tabs(0, 0, 1411, 813);
      { Fl_Group* o = new Fl_Group(0, 35, 1366, 768, "Home");
        o->hide();
        { Fl_Box* o = new Fl_Box(0, 0, 1366, 768, "LABSoft v1.0");
          o->labelsize(60);
          o->labelcolor((Fl_Color)46);
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1366, 768, "Oscilloscope");
        o->hide();
        { oscilloscope_fl_light_button_run_stop = new Fl_Light_Button(1205, 80, 120, 60, "Run");
          oscilloscope_fl_light_button_run_stop->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* oscilloscope_fl_light_button_run_stop
        { new Fl_Button(1205, 160, 120, 60, "Single");
        } // Fl_Button* o
        { oscilloscope_labsoft_oscilloscope_display_group_display = new LABSoft_Oscilloscope_Display_Group(24, 60, 800, 660);
          oscilloscope_labsoft_oscilloscope_display_group_display->box(FL_FLAT_BOX);
          oscilloscope_labsoft_oscilloscope_display_group_display->color(FL_FOREGROUND_COLOR);
          oscilloscope_labsoft_oscilloscope_display_group_display->selection_color(FL_BACKGROUND_COLOR);
          oscilloscope_labsoft_oscilloscope_display_group_display->labeltype(FL_NORMAL_LABEL);
          oscilloscope_labsoft_oscilloscope_display_group_display->labelfont(0);
          oscilloscope_labsoft_oscilloscope_display_group_display->labelsize(14);
          oscilloscope_labsoft_oscilloscope_display_group_display->labelcolor(FL_FOREGROUND_COLOR);
          oscilloscope_labsoft_oscilloscope_display_group_display->align(Fl_Align(FL_ALIGN_TOP));
          oscilloscope_labsoft_oscilloscope_display_group_display->when(FL_WHEN_RELEASE);
          { Fl_Box* o = new Fl_Box(69, 125, 720, 540);
            o->box(FL_FLAT_BOX);
            o->color((Fl_Color)79);
            o->selection_color(FL_YELLOW);
            o->hide();
            o->deactivate();
          } // Fl_Box* o
          oscilloscope_labsoft_oscilloscope_display_group_display->end();
        } // LABSoft_Oscilloscope_Display_Group* oscilloscope_labsoft_oscilloscope_display_group_display
        { oscilloscope_fl_group_vertical_channel_1 = new Fl_Group(0, 0, 1366, 768);
          { Fl_Box* o = new Fl_Box(845, 95, 160, 240, "Channel 1");
            o->box(FL_ROUNDED_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Box* o
          { oscilloscope_fl_light_button_channel_1_enable = new Fl_Light_Button(865, 115, 120, 60, "Ch. 1 Enable");
            oscilloscope_fl_light_button_channel_1_enable->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          } // Fl_Light_Button* oscilloscope_fl_light_button_channel_1_enable
          { oscilloscope_fl_input_choice_channel_1_volts_per_division = new Fl_Input_Choice(865, 215, 120, 30, "Volts per Division");
            oscilloscope_fl_input_choice_channel_1_volts_per_division->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_channel_1_volts_per_division
          { oscilloscope_fl_input_choice_channel_1_vertical_offset = new Fl_Input_Choice(865, 285, 120, 30, "Vertical Offset");
            oscilloscope_fl_input_choice_channel_1_vertical_offset->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_channel_1_vertical_offset
          oscilloscope_fl_group_vertical_channel_1->end();
        } // Fl_Group* oscilloscope_fl_group_vertical_channel_1
        { oscilloscope_fl_group_vertical_channel_2 = new Fl_Group(0, 0, 1366, 768);
          { Fl_Box* o = new Fl_Box(1015, 95, 160, 240, "Channel 2");
            o->box(FL_ROUNDED_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Box* o
          { oscilloscope_fl_light_button_channel_2_enable = new Fl_Light_Button(1035, 115, 120, 60, "Ch. 2 Enable");
            oscilloscope_fl_light_button_channel_2_enable->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          } // Fl_Light_Button* oscilloscope_fl_light_button_channel_2_enable
          { oscilloscope_fl_input_choice_channel_2_volts_per_division = new Fl_Input_Choice(1035, 215, 120, 30, "Volts per Division");
            oscilloscope_fl_input_choice_channel_2_volts_per_division->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_channel_2_volts_per_division
          { oscilloscope_fl_input_choice_channel_2_vertical_offset = new Fl_Input_Choice(1035, 285, 120, 30, "Vertical Offset");
            oscilloscope_fl_input_choice_channel_2_vertical_offset->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_channel_2_vertical_offset
          oscilloscope_fl_group_vertical_channel_2->end();
        } // Fl_Group* oscilloscope_fl_group_vertical_channel_2
        { oscilloscope_fl_group_horizontal = new Fl_Group(0, 0, 1366, 768);
          { Fl_Box* o = new Fl_Box(845, 360, 160, 240, "Horizontal");
            o->box(FL_ROUNDED_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Box* o
          { oscilloscope_fl_input_choice_time_per_division = new Fl_Input_Choice(865, 400, 120, 30, "Time per Division");
            oscilloscope_fl_input_choice_time_per_division->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_time_per_division
          { oscilloscope_fl_input_choice_horizontal_offset = new Fl_Input_Choice(865, 465, 120, 30, "Horizontal Offset");
            oscilloscope_fl_input_choice_horizontal_offset->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_horizontal_offset
          { new Fl_Button(865, 520, 120, 60, "Menu");
          } // Fl_Button* o
          oscilloscope_fl_group_horizontal->end();
        } // Fl_Group* oscilloscope_fl_group_horizontal
        { oscilloscope_fl_group_trigger = new Fl_Group(0, 0, 1366, 768);
          { Fl_Box* o = new Fl_Box(1015, 360, 160, 240, "Trigger");
            o->box(FL_ROUNDED_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Box* o
          { Fl_Input_Choice* o = new Fl_Input_Choice(1035, 400, 120, 30, "Level");
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Input_Choice* o
          { new Fl_Button(1035, 445, 120, 60, "Auto");
          } // Fl_Button* o
          { new Fl_Button(1035, 520, 120, 60, "Menu");
          } // Fl_Button* o
          oscilloscope_fl_group_trigger->end();
        } // Fl_Group* oscilloscope_fl_group_trigger
        { oscilloscope_fl_group_display = new Fl_Group(0, 0, 1366, 768);
          { Fl_Box* o = new Fl_Box(1185, 360, 160, 240, "Display");
            o->box(FL_ROUNDED_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Box* o
          { Fl_Input_Choice* o = new Fl_Input_Choice(1205, 400, 120, 30, "Mode");
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Input_Choice* o
          { new Fl_Button(1205, 445, 120, 60, "Auto");
          } // Fl_Button* o
          { new Fl_Button(1205, 520, 120, 60, "Menu");
          } // Fl_Button* o
          oscilloscope_fl_group_display->end();
        } // Fl_Group* oscilloscope_fl_group_display
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1366, 768, "Voltmeter");
        o->hide();
        { voltmeter_fl_output_value = new Fl_Output(323, 245, 320, 120);
          voltmeter_fl_output_value->textsize(94);
          voltmeter_fl_output_value->value ("0.000");
        } // Fl_Output* voltmeter_fl_output_value
        { voltmeter_fl_choice_unit = new Fl_Choice(723, 245, 320, 120);
          voltmeter_fl_choice_unit->down_box(FL_BORDER_BOX);
          voltmeter_fl_choice_unit->textsize(100);
          voltmeter_fl_choice_unit->callback((Fl_Callback*)cb_voltmeter_fl_choice_unit);
          voltmeter_fl_choice_unit->menu(menu_voltmeter_fl_choice_unit);
        } // Fl_Choice* voltmeter_fl_choice_unit
        { voltmeter_fl_light_button_run_stop = new Fl_Light_Button(383, 400, 600, 60, "Run");
          voltmeter_fl_light_button_run_stop->selection_color((Fl_Color)79);
          voltmeter_fl_light_button_run_stop->labelsize(24);
          voltmeter_fl_light_button_run_stop->callback((Fl_Callback*)cb_voltmeter_fl_light_button_run_stop);
          voltmeter_fl_light_button_run_stop->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* voltmeter_fl_light_button_run_stop
        { voltmeter_fl_light_button_generate_random_values = new Fl_Light_Button(24, 682, 360, 60, "DEBUG: Generate Random Values");
          voltmeter_fl_light_button_generate_random_values->callback((Fl_Callback*)cb_voltmeter_fl_light_button_generate_random_values);
          voltmeter_fl_light_button_generate_random_values->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* voltmeter_fl_light_button_generate_random_values
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1366, 768, "Ammeter");
        o->hide();
        { ammeter_fl_output_value = new Fl_Output(323, 245, 320, 120);
          ammeter_fl_output_value->textsize(94);
        } // Fl_Output* ammeter_fl_output_value
        { ammeter_fl_choice_unit = new Fl_Choice(723, 245, 320, 120);
          ammeter_fl_choice_unit->down_box(FL_BORDER_BOX);
          ammeter_fl_choice_unit->textsize(100);
          ammeter_fl_choice_unit->menu(menu_ammeter_fl_choice_unit);
        } // Fl_Choice* ammeter_fl_choice_unit
        { ammeter_fl_light_button_run_stop = new Fl_Light_Button(383, 400, 600, 60, "Stop");
          ammeter_fl_light_button_run_stop->selection_color((Fl_Color)79);
          ammeter_fl_light_button_run_stop->labelsize(24);
          ammeter_fl_light_button_run_stop->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* ammeter_fl_light_button_run_stop
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1366, 768, "Ohmmeter");
        o->hide();
        { ohmmeter_fl_output_value = new Fl_Output(323, 245, 320, 120);
          ohmmeter_fl_output_value->textsize(94);
        } // Fl_Output* ohmmeter_fl_output_value
        { ohmmeter_fl_choice_unit = new Fl_Choice(723, 245, 320, 120);
          ohmmeter_fl_choice_unit->down_box(FL_BORDER_BOX);
          ohmmeter_fl_choice_unit->textsize(100);
          ohmmeter_fl_choice_unit->menu(menu_ohmmeter_fl_choice_unit);
        } // Fl_Choice* ohmmeter_fl_choice_unit
        { ohmmeter_fl_light_button_run_stop = new Fl_Light_Button(383, 400, 600, 60, "Stopped");
          ohmmeter_fl_light_button_run_stop->selection_color((Fl_Color)79);
          ohmmeter_fl_light_button_run_stop->labelsize(24);
          ohmmeter_fl_light_button_run_stop->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* ohmmeter_fl_light_button_run_stop
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1366, 768, "Function Generator");
        o->hide();
        { function_generator_fl_light_button_start_stop = new Fl_Light_Button(1195, 165, 120, 60, "Stopped");
          function_generator_fl_light_button_start_stop->callback((Fl_Callback*)cb_function_generator_fl_light_button_start_stop);
          function_generator_fl_light_button_start_stop->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* function_generator_fl_light_button_start_stop
        { function_generator_labsoft_oscilloscope_display_group_display = new LABSoft_Oscilloscope_Display_Group(24, 60, 800, 660);
          function_generator_labsoft_oscilloscope_display_group_display->box(FL_FLAT_BOX);
          function_generator_labsoft_oscilloscope_display_group_display->color(FL_FOREGROUND_COLOR);
          function_generator_labsoft_oscilloscope_display_group_display->selection_color(FL_BACKGROUND_COLOR);
          function_generator_labsoft_oscilloscope_display_group_display->labeltype(FL_NORMAL_LABEL);
          function_generator_labsoft_oscilloscope_display_group_display->labelfont(0);
          function_generator_labsoft_oscilloscope_display_group_display->labelsize(14);
          function_generator_labsoft_oscilloscope_display_group_display->labelcolor(FL_FOREGROUND_COLOR);
          function_generator_labsoft_oscilloscope_display_group_display->align(Fl_Align(FL_ALIGN_TOP));
          function_generator_labsoft_oscilloscope_display_group_display->when(FL_WHEN_RELEASE);
          { Fl_Box* o = new Fl_Box(64, 120, 720, 540);
            o->box(FL_FLAT_BOX);
            o->color((Fl_Color)79);
            o->selection_color(FL_YELLOW);
            o->hide();
            o->deactivate();
          } // Fl_Box* o
          function_generator_labsoft_oscilloscope_display_group_display->end();
        } // LABSoft_Oscilloscope_Display_Group* function_generator_labsoft_oscilloscope_display_group_display
        { function_generator_fl_group_horizontal = new Fl_Group(145, 90, 1200, 602);
          { Fl_Box* o = new Fl_Box(1110, 542, 200, 150, "Horizontal");
            o->box(FL_ROUNDED_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Box* o
          { function_generator_fl_input_choice_horizontal_position = new Fl_Input_Choice(1135, 575, 150, 25, "Position");
            function_generator_fl_input_choice_horizontal_position->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_horizontal_position->menu(menu_function_generator_fl_input_choice_horizontal_position);
            function_generator_fl_input_choice_horizontal_position->value ("0 s");
          } // Fl_Input_Choice* function_generator_fl_input_choice_horizontal_position
          { function_generator_fl_input_choice_time_per_division = new Fl_Input_Choice(1135, 638, 150, 25, "Time per Division");
            function_generator_fl_input_choice_time_per_division->callback((Fl_Callback*)cb_function_generator_fl_input_choice_time_per_division);
            function_generator_fl_input_choice_time_per_division->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_time_per_division->when(FL_WHEN_CHANGED);
            function_generator_fl_input_choice_time_per_division->menu(menu_function_generator_fl_input_choice_time_per_division);
            function_generator_fl_input_choice_time_per_division->value ("1 s/div");
          } // Fl_Input_Choice* function_generator_fl_input_choice_time_per_division
          function_generator_fl_group_horizontal->end();
        } // Fl_Group* function_generator_fl_group_horizontal
        { function_generator_fl_group_vertical = new Fl_Group(145, 90, 1200, 600);
          { Fl_Box* o = new Fl_Box(1110, 347, 200, 150, "Vertical");
            o->box(FL_ROUNDED_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Box* o
          { function_generator_fl_input_choice_vertical_offset = new Fl_Input_Choice(1135, 380, 150, 25, "Offset");
            function_generator_fl_input_choice_vertical_offset->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_vertical_offset->menu(menu_function_generator_fl_input_choice_vertical_offset);
            function_generator_fl_input_choice_vertical_offset->value ("0 V");
          } // Fl_Input_Choice* function_generator_fl_input_choice_vertical_offset
          { function_generator_fl_input_choice_volts_per_division = new Fl_Input_Choice(1135, 443, 150, 25, "Volts per Division");
            function_generator_fl_input_choice_volts_per_division->callback((Fl_Callback*)cb_function_generator_fl_input_choice_volts_per_division);
            function_generator_fl_input_choice_volts_per_division->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_volts_per_division->menu(menu_function_generator_fl_input_choice_volts_per_division);
            function_generator_fl_input_choice_volts_per_division->value ("1 V/div");
          } // Fl_Input_Choice* function_generator_fl_input_choice_volts_per_division
          function_generator_fl_group_vertical->end();
        } // Fl_Group* function_generator_fl_group_vertical
        { function_generator_fl_group_parameters = new Fl_Group(0, 0, 1366, 768);
          { function_generator_fl_input_choice_wave_type = new Fl_Input_Choice(950, 100, 120, 40, "Wave Type");
            function_generator_fl_input_choice_wave_type->callback((Fl_Callback*)cb_function_generator_fl_input_choice_wave_type);
            function_generator_fl_input_choice_wave_type->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_wave_type->menu(menu_function_generator_fl_input_choice_wave_type);
            function_generator_fl_input_choice_wave_type->value("Sine");
          } // Fl_Input_Choice* function_generator_fl_input_choice_wave_type
          { function_generator_fl_input_choice_frequency = new Fl_Input_Choice(950, 180, 120, 40, "Frequency");
            function_generator_fl_input_choice_frequency->callback((Fl_Callback*)cb_function_generator_fl_input_choice_frequency);
            function_generator_fl_input_choice_frequency->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_frequency->menu(menu_function_generator_fl_input_choice_frequency);
            function_generator_fl_input_choice_frequency->value ("1 Hz");
          } // Fl_Input_Choice* function_generator_fl_input_choice_frequency
          { function_generator_fl_input_choice_period = new Fl_Input_Choice(950, 260, 120, 40, "Period");
            function_generator_fl_input_choice_period->callback((Fl_Callback*)cb_function_generator_fl_input_choice_period);
            function_generator_fl_input_choice_period->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_period->deactivate();
            function_generator_fl_input_choice_period->menu(menu_function_generator_fl_input_choice_period);
            function_generator_fl_input_choice_period->value ("1 s");
          } // Fl_Input_Choice* function_generator_fl_input_choice_period
          { function_generator_fl_input_choice_amplitude = new Fl_Input_Choice(950, 340, 120, 40, "Amplitude");
            function_generator_fl_input_choice_amplitude->callback((Fl_Callback*)cb_function_generator_fl_input_choice_amplitude);
            function_generator_fl_input_choice_amplitude->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_amplitude->menu(menu_function_generator_fl_input_choice_amplitude);
            function_generator_fl_input_choice_amplitude->value ("1 V");
          } // Fl_Input_Choice* function_generator_fl_input_choice_amplitude
          { function_generator_fl_input_choice_offset = new Fl_Input_Choice(950, 420, 120, 40, "Offset");
            function_generator_fl_input_choice_offset->callback((Fl_Callback*)cb_function_generator_fl_input_choice_offset);
            function_generator_fl_input_choice_offset->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_offset->menu(menu_function_generator_fl_input_choice_offset);
            function_generator_fl_input_choice_offset->value ("0 V");
          } // Fl_Input_Choice* function_generator_fl_input_choice_offset
          { function_generator_fl_input_choice_duty_cycle = new Fl_Input_Choice(950, 500, 120, 40, "Duty Cycle");
            function_generator_fl_input_choice_duty_cycle->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_duty_cycle->deactivate();
            function_generator_fl_input_choice_duty_cycle->menu(menu_function_generator_fl_input_choice_duty_cycle);
          } // Fl_Input_Choice* function_generator_fl_input_choice_duty_cycle
          { function_generator_fl_input_choice_phase = new Fl_Input_Choice(950, 580, 120, 40, "Phase");
            function_generator_fl_input_choice_phase->callback((Fl_Callback*)cb_function_generator_fl_input_choice_phase);
            function_generator_fl_input_choice_phase->align(Fl_Align(FL_ALIGN_TOP));
            function_generator_fl_input_choice_phase->menu(menu_function_generator_fl_input_choice_phase);
            function_generator_fl_input_choice_phase->value ("0 deg");
          } // Fl_Input_Choice* function_generator_fl_input_choice_phase
          function_generator_fl_group_parameters->end();
        } // Fl_Group* function_generator_fl_group_parameters
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1366, 768, "Logic Analyzer");
        o->hide();
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1366, 768, "Power Supply");
        o->hide();
        { power_supply_fl_light_button_positive_12_volts = new Fl_Light_Button(273, 240, 240, 120, "+12V");
          power_supply_fl_light_button_positive_12_volts->selection_color((Fl_Color)79);
          power_supply_fl_light_button_positive_12_volts->labelsize(48);
          power_supply_fl_light_button_positive_12_volts->callback((Fl_Callback*)cb_power_supply_fl_light_button_positive_12_volts);
          power_supply_fl_light_button_positive_12_volts->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* power_supply_fl_light_button_positive_12_volts
        { power_supply_fl_light_button_negative_12_volts = new Fl_Light_Button(563, 240, 240, 120, "-12V");
          power_supply_fl_light_button_negative_12_volts->selection_color((Fl_Color)79);
          power_supply_fl_light_button_negative_12_volts->labelsize(48);
          power_supply_fl_light_button_negative_12_volts->callback((Fl_Callback*)cb_power_supply_fl_light_button_negative_12_volts);
          power_supply_fl_light_button_negative_12_volts->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* power_supply_fl_light_button_negative_12_volts
        { power_supply_fl_light_button_positive_5_volts = new Fl_Light_Button(853, 240, 240, 120, "+5V");
          power_supply_fl_light_button_positive_5_volts->selection_color((Fl_Color)79);
          power_supply_fl_light_button_positive_5_volts->labelsize(48);
          power_supply_fl_light_button_positive_5_volts->callback((Fl_Callback*)cb_power_supply_fl_light_button_positive_5_volts);
          power_supply_fl_light_button_positive_5_volts->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* power_supply_fl_light_button_positive_5_volts
        { power_supply_fl_light_button_master_enable_disable = new Fl_Light_Button(383, 400, 600, 60, "Master Enable");
          power_supply_fl_light_button_master_enable_disable->selection_color((Fl_Color)79);
          power_supply_fl_light_button_master_enable_disable->labelsize(24);
          power_supply_fl_light_button_master_enable_disable->callback((Fl_Callback*)cb_power_supply_fl_light_button_master_enable_disable);
          power_supply_fl_light_button_master_enable_disable->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* power_supply_fl_light_button_master_enable_disable
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1366, 768, "Circuit Checker");
        { circuit_checker_fl_file_browser_file_browser = new Fl_File_Browser(203, 180, 300, 120, "Circuit Checker File");
          circuit_checker_fl_file_browser_file_browser->align(Fl_Align(129));
          circuit_checker_fl_file_browser_file_browser->load(".");
          circuit_checker_fl_file_browser_file_browser->type (FL_HOLD_BROWSER);
        } // Fl_File_Browser* circuit_checker_fl_file_browser_file_browser
        { circuit_checker_fl_button_start = new Fl_Button(533, 180, 300, 120, "Start Circuit Checking");
          circuit_checker_fl_button_start->labelsize(24);
        } // Fl_Button* circuit_checker_fl_button_start
        { circuit_checker_fl_output_similarity_score = new Fl_Output(863, 180, 300, 120, "Similarity Score");
          circuit_checker_fl_output_similarity_score->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Output* circuit_checker_fl_output_similarity_score
        { Fl_Output* o = new Fl_Output(203, 340, 960, 240, "Console Output:");
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Output* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 35, 1366, 768, "Settings");
        o->hide();
        { Fl_Group* o = new Fl_Group(35, 70, 300, 120, "Settings");
          o->labelsize(48);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { alignment_guides = new Fl_Group(0, 0, 1366, 768);
      alignment_guides->hide();
      alignment_guides->deactivate();
      { inner_height = new Fl_Box(0, 35, 1366, 366);
        inner_height->box(FL_UP_FRAME);
        inner_height->color(FL_RED);
      } // Fl_Box* inner_height
      { outer_height = new Fl_Box(0, 0, 1366, 384);
        outer_height->box(FL_DOWN_FRAME);
        outer_height->color(FL_YELLOW);
      } // Fl_Box* outer_height
      { inner_height_crosswise = new Fl_Box(0, 0, 683, 768);
        inner_height_crosswise->box(FL_UP_FRAME);
        inner_height_crosswise->color(FL_RED);
      } // Fl_Box* inner_height_crosswise
      alignment_guides->end();
    } // Fl_Group* alignment_guides
    main_fl_window->end();
  } // Fl_Double_Window* main_fl_window
}
