// generated by Fast Light User Interface Designer (fluid) version 1.0305

#include "LABSoft_GUI.h"
#include "LABSoft_Controller.h"

Fl_Menu_Item LABSoft_GUI::menu_[] = {
 {"File", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Exit", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Settings", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_button_run_stop_i(Fl_Button* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_run_stop (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_button_run_stop(Fl_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_button_run_stop_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_button_single_i(Fl_Button* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_single (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_button_single(Fl_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_button_single_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_light_button_test_i(Fl_Light_Button* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_test (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_light_button_test(Fl_Light_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_light_button_test_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_light_button_channel_1_enable_i(Fl_Light_Button* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_channel_enable_disable (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_light_button_channel_1_enable(Fl_Light_Button* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_light_button_channel_1_enable_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_input_choice_channel_1_volts_per_division_i(Fl_Input_Choice* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_volts_per_division (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_input_choice_channel_1_volts_per_division(Fl_Input_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_input_choice_channel_1_volts_per_division_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_input_choice_channel_1_volts_per_division[] = {
 {"10 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 uV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 uV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 uV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_input_choice_channel_1_vertical_offset_i(Fl_Input_Choice* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_vertical_offset (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_input_choice_channel_1_vertical_offset(Fl_Input_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_input_choice_channel_1_vertical_offset_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_input_choice_channel_1_vertical_offset[] = {
 {"25 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-10 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-20 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-50 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-100 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-200 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-500 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-10 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-25 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_choice_channel_1_scaling_i(Fl_Choice* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_scaling (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_choice_channel_1_scaling(Fl_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_choice_channel_1_scaling_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_choice_channel_1_scaling[] = {
 {"x2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"x0.5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"x0.25", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"x0.125", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_light_button_channel_1_ac_coupling_i(Fl_Light_Button* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_ac_coupling (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_light_button_channel_1_ac_coupling(Fl_Light_Button* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_light_button_channel_1_ac_coupling_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_light_button_channel_2_enable_i(Fl_Light_Button* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_channel_enable_disable (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_light_button_channel_2_enable(Fl_Light_Button* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_light_button_channel_2_enable_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_input_choice_channel_2_volts_per_division_i(Fl_Input_Choice* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_volts_per_division (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_input_choice_channel_2_volts_per_division(Fl_Input_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_input_choice_channel_2_volts_per_division_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_input_choice_channel_2_volts_per_division[] = {
 {"10 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 uV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 uV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 uV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_input_choice_channel_2_vertical_offset_i(Fl_Input_Choice* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_vertical_offset (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_input_choice_channel_2_vertical_offset(Fl_Input_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_input_choice_channel_2_vertical_offset_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_input_choice_channel_2_vertical_offset[] = {
 {"25 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-10 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-20 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-50 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-100 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-200 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-500 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-10 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-25 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_choice_channel_2_scaling_i(Fl_Choice* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_scaling (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_choice_channel_2_scaling(Fl_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_choice_channel_2_scaling_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_choice_channel_2_scaling[] = {
 {"x2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"x0.5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"x0.25", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"x0.125", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_light_button_channel_2_ac_coupling_i(Fl_Light_Button* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_ac_coupling (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_light_button_channel_2_ac_coupling(Fl_Light_Button* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_light_button_channel_2_ac_coupling_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_input_choice_time_per_division_i(Fl_Input_Choice* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_time_per_division (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_input_choice_time_per_division(Fl_Input_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_input_choice_time_per_division_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_input_choice_time_per_division[] = {
 {"30 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"12 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_input_choice_horizontal_offset_i(Fl_Input_Choice* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_x_offset (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_input_choice_horizontal_offset(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_input_choice_horizontal_offset_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_input_choice_horizontal_offset[] = {
 {"50 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ns", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 ns", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 ns", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 ns", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 ns", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 ns", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 ns", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 ns", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 ns", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_input_choice_display_mode[] = {
 {"Repeated", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Shift", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Screen", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_voltmeter_fl_button_run_stop_i(Fl_Button* o, void* v) {
  m_LABSoft_Controller->m_Voltmeter.cb_run_stop (o, v);
}
void LABSoft_GUI::cb_voltmeter_fl_button_run_stop(Fl_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_voltmeter_fl_button_run_stop_i(o,v);
}

void LABSoft_GUI::cb_function_generator_fl_light_button_run_stop_i(Fl_Light_Button* o, long v) {
  m_LABSoft_Controller->m_Function_Generator.cb_run_stop (o, v);
}
void LABSoft_GUI::cb_function_generator_fl_light_button_run_stop(Fl_Light_Button* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_light_button_run_stop_i(o,v);
}

void LABSoft_GUI::cb_function_generator_fl_input_choice_wave_type_i(Fl_Input_Choice* o, long v) {
  m_LABSoft_Controller->m_Function_Generator.cb_wave_type (o, v);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_wave_type(Fl_Input_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_wave_type_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_wave_type[] = {
 {"Sine", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Square", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Triangle", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"DC", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_frequency_i(Fl_Input_Choice* o, long v) {
  m_LABSoft_Controller->m_Function_Generator.cb_frequency (o, v);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_frequency(Fl_Input_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_frequency_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_frequency[] = {
 {"1 MHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 mHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_period_i(Fl_Input_Choice* o, long v) {
  m_LABSoft_Controller->m_Function_Generator.cb_period (o, v);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_period(Fl_Input_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_period_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_period[] = {
 {"5 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_amplitude_i(Fl_Input_Choice* o, long v) {
  m_LABSoft_Controller->m_Function_Generator.cb_amplitude (o, v);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_amplitude(Fl_Input_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_amplitude_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_amplitude[] = {
 {"5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_offset_i(Fl_Input_Choice* o, long v) {
  m_LABSoft_Controller->m_Function_Generator.cb_offset (o, v);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_offset(Fl_Input_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_offset_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_offset[] = {
 {"5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_duty_cycle_i(Fl_Input_Choice* o, long v) {
  m_LABSoft_Controller->m_Function_Generator.cb_duty_cycle (o, v);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_duty_cycle(Fl_Input_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_duty_cycle_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_duty_cycle[] = {
 {"5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_phase_i(Fl_Input_Choice* o, long v) {
  m_LABSoft_Controller->m_Function_Generator.cb_phase (o, v);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_phase(Fl_Input_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_phase_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_phase[] = {
 {"-360 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-180 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-90 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-45 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-30 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+30 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+45 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+60 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+90 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+180 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+360 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_logic_analyzer_fl_light_button_master_run_stop_i(Fl_Light_Button* o, void* v) {
  m_LABSoft_Controller->m_Logic_Analyzer.cb_master_run_stop (o, v);
}
void LABSoft_GUI::cb_logic_analyzer_fl_light_button_master_run_stop(Fl_Light_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_logic_analyzer_fl_light_button_master_run_stop_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_logic_analyzer_fl_input_choice_memory_depth[] = {
 {"4096", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2048", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1024", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"512", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"256", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"128", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"64", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"32", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_logic_analyzer_fl_input_choice_sample_rate[] = {
 {"50 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_logic_analyzer_fl_input_choice_time_per_division[] = {
 {"20 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_logic_analyzer_fl_input_choice_position[] = {
 {"5 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-500 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-200 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-100 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-50 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item LABSoft_GUI::menu_logic_analyzer_fl_choice_display_mode[] = {
 {"item", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_circuit_checker_fl_button_choose_circuit_checker_file_i(Fl_Button* o, void* v) {
  m_LABSoft_Controller->m_Circuit_Checker.cb_fl_button_choose_circuit_checker_file (o, v);
}
void LABSoft_GUI::cb_circuit_checker_fl_button_choose_circuit_checker_file(Fl_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_circuit_checker_fl_button_choose_circuit_checker_file_i(o,v);
}

void LABSoft_GUI::cb_circuit_checker_fl_button_start_circuit_checking_i(Fl_Button* o, void* v) {
  m_LABSoft_Controller->m_Circuit_Checker.cb_fl_button_start_circuit_checking (o, v);
}
void LABSoft_GUI::cb_circuit_checker_fl_button_start_circuit_checking(Fl_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_circuit_checker_fl_button_start_circuit_checking_i(o,v);
}

LABSoft_GUI::LABSoft_GUI() {
  { main_fl_window = new Fl_Double_Window(1366, 768, "LABSoft v1.0 Build 1");
    main_fl_window->user_data((void*)(this));
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 1366, 30);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { Fl_Tabs* o = new Fl_Tabs(0, 30, 1366, 738);
      o->box(FL_UP_BOX);
      { Fl_Group* o = new Fl_Group(0, 60, 1366, 708, "Home");
        o->hide();
        { Fl_Box* o = new Fl_Box(0, 0, 1366, 768, "LABSoft v1.0");
          o->labelsize(60);
          o->labelcolor((Fl_Color)46);
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 60, 1366, 708, "Oscilloscope");
        { oscilloscope_fl_button_run_stop = new Fl_Button(1205, 80, 120, 60, "Run");
          oscilloscope_fl_button_run_stop->callback((Fl_Callback*)cb_oscilloscope_fl_button_run_stop);
        } // Fl_Button* oscilloscope_fl_button_run_stop
        { oscilloscope_fl_button_single = new Fl_Button(1205, 160, 120, 60, "Single");
          oscilloscope_fl_button_single->callback((Fl_Callback*)cb_oscilloscope_fl_button_single);
        } // Fl_Button* oscilloscope_fl_button_single
        { oscilloscope_fl_light_button_test = new Fl_Light_Button(1205, 240, 120, 60, "Run");
          oscilloscope_fl_light_button_test->callback((Fl_Callback*)cb_oscilloscope_fl_light_button_test);
          oscilloscope_fl_light_button_test->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* oscilloscope_fl_light_button_test
        { oscilloscope_labsoft_oscilloscope_display_group_display = new LABSoft_Oscilloscope_Display_Group(24, 84, 800, 660);
          oscilloscope_labsoft_oscilloscope_display_group_display->box(FL_FLAT_BOX);
          oscilloscope_labsoft_oscilloscope_display_group_display->color(FL_FOREGROUND_COLOR);
          oscilloscope_labsoft_oscilloscope_display_group_display->selection_color(FL_BACKGROUND_COLOR);
          oscilloscope_labsoft_oscilloscope_display_group_display->labeltype(FL_NORMAL_LABEL);
          oscilloscope_labsoft_oscilloscope_display_group_display->labelfont(0);
          oscilloscope_labsoft_oscilloscope_display_group_display->labelsize(14);
          oscilloscope_labsoft_oscilloscope_display_group_display->labelcolor(FL_FOREGROUND_COLOR);
          oscilloscope_labsoft_oscilloscope_display_group_display->align(Fl_Align(FL_ALIGN_TOP));
          oscilloscope_labsoft_oscilloscope_display_group_display->when(FL_WHEN_RELEASE);
          oscilloscope_labsoft_oscilloscope_display_group_display->end();
        } // LABSoft_Oscilloscope_Display_Group* oscilloscope_labsoft_oscilloscope_display_group_display
        { oscilloscope_fl_group_vertical_channel_1 = new Fl_Group(0, 0, 1366, 768);
          { Fl_Box* o = new Fl_Box(845, 95, 160, 330, "Channel 1");
            o->box(FL_ROUNDED_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Box* o
          { oscilloscope_fl_light_button_channel_1_enable = new Fl_Light_Button(865, 115, 120, 60, "Ch. 1 Enable");
            oscilloscope_fl_light_button_channel_1_enable->callback((Fl_Callback*)cb_oscilloscope_fl_light_button_channel_1_enable, (void*)(0));
            oscilloscope_fl_light_button_channel_1_enable->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          } // Fl_Light_Button* oscilloscope_fl_light_button_channel_1_enable
          { oscilloscope_fl_input_choice_channel_1_volts_per_division = new Fl_Input_Choice(865, 200, 120, 30, "Volts per Division");
            oscilloscope_fl_input_choice_channel_1_volts_per_division->callback((Fl_Callback*)cb_oscilloscope_fl_input_choice_channel_1_volts_per_division, (void*)(0));
            oscilloscope_fl_input_choice_channel_1_volts_per_division->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_input_choice_channel_1_volts_per_division->menu(menu_oscilloscope_fl_input_choice_channel_1_volts_per_division);
            oscilloscope_fl_input_choice_channel_1_volts_per_division->value (LABSOFT_OSCILLOSCOPE_CHANNEL_1_VOLTAGE_PER_DIVISION);
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_channel_1_volts_per_division
          { oscilloscope_fl_input_choice_channel_1_vertical_offset = new Fl_Input_Choice(865, 260, 120, 30, "Vertical Offset");
            oscilloscope_fl_input_choice_channel_1_vertical_offset->callback((Fl_Callback*)cb_oscilloscope_fl_input_choice_channel_1_vertical_offset, (void*)(0));
            oscilloscope_fl_input_choice_channel_1_vertical_offset->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_input_choice_channel_1_vertical_offset->menu(menu_oscilloscope_fl_input_choice_channel_1_vertical_offset);
            oscilloscope_fl_input_choice_channel_1_vertical_offset->value (LABSOFT_OSCILLOSCOPE_CHANNEL_1_Y_OFFSET);
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_channel_1_vertical_offset
          { oscilloscope_fl_choice_channel_1_scaling = new Fl_Choice(865, 320, 120, 30, "Scaling");
            oscilloscope_fl_choice_channel_1_scaling->down_box(FL_BORDER_BOX);
            oscilloscope_fl_choice_channel_1_scaling->callback((Fl_Callback*)cb_oscilloscope_fl_choice_channel_1_scaling, (void*)(0));
            oscilloscope_fl_choice_channel_1_scaling->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_choice_channel_1_scaling->menu(menu_oscilloscope_fl_choice_channel_1_scaling);
          } // Fl_Choice* oscilloscope_fl_choice_channel_1_scaling
          { oscilloscope_fl_light_button_channel_1_ac_coupling = new Fl_Light_Button(864, 370, 120, 30, "AC Coupling");
            oscilloscope_fl_light_button_channel_1_ac_coupling->callback((Fl_Callback*)cb_oscilloscope_fl_light_button_channel_1_ac_coupling, (void*)(0));
          } // Fl_Light_Button* oscilloscope_fl_light_button_channel_1_ac_coupling
          oscilloscope_fl_group_vertical_channel_1->end();
        } // Fl_Group* oscilloscope_fl_group_vertical_channel_1
        { oscilloscope_fl_group_vertical_channel_2 = new Fl_Group(0, 0, 1366, 768);
          { Fl_Box* o = new Fl_Box(1015, 95, 160, 330, "Channel 2");
            o->box(FL_ROUNDED_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Box* o
          { oscilloscope_fl_light_button_channel_2_enable = new Fl_Light_Button(1035, 115, 120, 60, "Ch. 2 Enable");
            oscilloscope_fl_light_button_channel_2_enable->callback((Fl_Callback*)cb_oscilloscope_fl_light_button_channel_2_enable, (void*)(1));
            oscilloscope_fl_light_button_channel_2_enable->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          } // Fl_Light_Button* oscilloscope_fl_light_button_channel_2_enable
          { oscilloscope_fl_input_choice_channel_2_volts_per_division = new Fl_Input_Choice(1035, 200, 120, 30, "Volts per Division");
            oscilloscope_fl_input_choice_channel_2_volts_per_division->callback((Fl_Callback*)cb_oscilloscope_fl_input_choice_channel_2_volts_per_division, (void*)(1));
            oscilloscope_fl_input_choice_channel_2_volts_per_division->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_input_choice_channel_2_volts_per_division->menu(menu_oscilloscope_fl_input_choice_channel_2_volts_per_division);
            oscilloscope_fl_input_choice_channel_2_volts_per_division->value (LABSOFT_OSCILLOSCOPE_CHANNEL_2_VOLTAGE_PER_DIVISION);
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_channel_2_volts_per_division
          { oscilloscope_fl_input_choice_channel_2_vertical_offset = new Fl_Input_Choice(1035, 260, 120, 30, "Vertical Offset");
            oscilloscope_fl_input_choice_channel_2_vertical_offset->callback((Fl_Callback*)cb_oscilloscope_fl_input_choice_channel_2_vertical_offset, (void*)(1));
            oscilloscope_fl_input_choice_channel_2_vertical_offset->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_input_choice_channel_2_vertical_offset->menu(menu_oscilloscope_fl_input_choice_channel_2_vertical_offset);
            oscilloscope_fl_input_choice_channel_2_vertical_offset->value (LABSOFT_OSCILLOSCOPE_CHANNEL_2_Y_OFFSET);
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_channel_2_vertical_offset
          { oscilloscope_fl_choice_channel_2_scaling = new Fl_Choice(1035, 320, 120, 30, "Scaling");
            oscilloscope_fl_choice_channel_2_scaling->down_box(FL_BORDER_BOX);
            oscilloscope_fl_choice_channel_2_scaling->callback((Fl_Callback*)cb_oscilloscope_fl_choice_channel_2_scaling, (void*)(1));
            oscilloscope_fl_choice_channel_2_scaling->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_choice_channel_2_scaling->menu(menu_oscilloscope_fl_choice_channel_2_scaling);
          } // Fl_Choice* oscilloscope_fl_choice_channel_2_scaling
          { oscilloscope_fl_light_button_channel_2_ac_coupling = new Fl_Light_Button(1035, 370, 120, 30, "AC Coupling");
            oscilloscope_fl_light_button_channel_2_ac_coupling->callback((Fl_Callback*)cb_oscilloscope_fl_light_button_channel_2_ac_coupling, (void*)(1));
          } // Fl_Light_Button* oscilloscope_fl_light_button_channel_2_ac_coupling
          oscilloscope_fl_group_vertical_channel_2->end();
        } // Fl_Group* oscilloscope_fl_group_vertical_channel_2
        { oscilloscope_fl_group_horizontal = new Fl_Group(0, 0, 1366, 768);
          { Fl_Box* o = new Fl_Box(845, 480, 160, 240, "Horizontal");
            o->box(FL_ROUNDED_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Box* o
          { oscilloscope_fl_input_choice_time_per_division = new Fl_Input_Choice(865, 520, 120, 30, "Time per Division");
            oscilloscope_fl_input_choice_time_per_division->callback((Fl_Callback*)cb_oscilloscope_fl_input_choice_time_per_division, (void*)(0));
            oscilloscope_fl_input_choice_time_per_division->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_input_choice_time_per_division->menu(menu_oscilloscope_fl_input_choice_time_per_division);
            oscilloscope_fl_input_choice_time_per_division->value (LABSOFT_OSCILLOSCOPE_TIME_PER_DIVISION);
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_time_per_division
          { oscilloscope_fl_input_choice_horizontal_offset = new Fl_Input_Choice(865, 580, 120, 30, "Horizontal Offset");
            oscilloscope_fl_input_choice_horizontal_offset->callback((Fl_Callback*)cb_oscilloscope_fl_input_choice_horizontal_offset);
            oscilloscope_fl_input_choice_horizontal_offset->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_input_choice_horizontal_offset->menu(menu_oscilloscope_fl_input_choice_horizontal_offset);
            oscilloscope_fl_input_choice_horizontal_offset->value (LABSOFT_OSCILLOSCOPE_X_OFFSET);
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_horizontal_offset
          { new Fl_Button(865, 630, 120, 60, "Menu");
          } // Fl_Button* o
          oscilloscope_fl_group_horizontal->end();
        } // Fl_Group* oscilloscope_fl_group_horizontal
        { oscilloscope_fl_group_trigger = new Fl_Group(0, -4, 1366, 768);
          { Fl_Box* o = new Fl_Box(1015, 450, 160, 240, "Trigger");
            o->box(FL_ROUNDED_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Box* o
          { oscilloscope_fl_input_choice_trigger_level = new Fl_Input_Choice(1035, 490, 120, 30, "Level");
            oscilloscope_fl_input_choice_trigger_level->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_input_choice_trigger_level->value (LABSOFT_OSCILLOSCOPE_TRIGGER_LEVEL);
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_trigger_level
          { new Fl_Button(1035, 530, 120, 60, "Auto");
          } // Fl_Button* o
          { new Fl_Button(1035, 600, 120, 60, "Menu");
          } // Fl_Button* o
          oscilloscope_fl_group_trigger->end();
        } // Fl_Group* oscilloscope_fl_group_trigger
        { oscilloscope_fl_group_display = new Fl_Group(0, 0, 1366, 768);
          oscilloscope_fl_group_display->labeltype(FL_NO_LABEL);
          { Fl_Box* o = new Fl_Box(1185, 360, 160, 240, "Display");
            o->box(FL_ROUNDED_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Box* o
          { oscilloscope_fl_input_choice_display_mode = new Fl_Input_Choice(1205, 400, 120, 30, "Mode");
            oscilloscope_fl_input_choice_display_mode->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_input_choice_display_mode->menu(menu_oscilloscope_fl_input_choice_display_mode);
            oscilloscope_fl_input_choice_display_mode->value (LABSOFT_OSCILLOSCOPE_DISPLAY_MODE);
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_display_mode
          { new Fl_Button(1205, 445, 120, 60, "Auto");
          } // Fl_Button* o
          { new Fl_Button(1205, 520, 120, 60, "Menu");
          } // Fl_Button* o
          oscilloscope_fl_group_display->end();
        } // Fl_Group* oscilloscope_fl_group_display
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 60, 1366, 708, "Voltmeter");
        o->hide();
        { Fl_Box* o = new Fl_Box(440, 250, 35, 17, "Channel 1");
          o->labelsize(18);
        } // Fl_Box* o
        { voltmeter_fl_output_chan1_value = new Fl_Output(300, 280, 320, 60, "DC");
          voltmeter_fl_output_chan1_value->labelsize(18);
          voltmeter_fl_output_chan1_value->textsize(48);
          voltmeter_fl_output_chan1_value->user_data((void*)(1));
        } // Fl_Output* voltmeter_fl_output_chan1_value
        { Fl_Box* o = new Fl_Box(915, 250, 35, 17, "Channel 2");
          o->labelsize(18);
        } // Fl_Box* o
        { voltmeter_fl_output_chan2_value = new Fl_Output(770, 280, 320, 60, "DC");
          voltmeter_fl_output_chan2_value->labelsize(24);
          voltmeter_fl_output_chan2_value->textsize(48);
          voltmeter_fl_output_chan2_value->user_data((void*)(2));
        } // Fl_Output* voltmeter_fl_output_chan2_value
        { voltmeter_fl_button_run_stop = new Fl_Button(533, 450, 300, 60, "Run");
          voltmeter_fl_button_run_stop->labelsize(28);
          voltmeter_fl_button_run_stop->callback((Fl_Callback*)cb_voltmeter_fl_button_run_stop);
        } // Fl_Button* voltmeter_fl_button_run_stop
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 60, 1366, 708, "Function Generator");
        o->hide();
        { function_generator_fl_light_button_run_stop = new Fl_Light_Button(300, 200, 180, 60, "Run");
          function_generator_fl_light_button_run_stop->callback((Fl_Callback*)cb_function_generator_fl_light_button_run_stop, (void*)(0));
          function_generator_fl_light_button_run_stop->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* function_generator_fl_light_button_run_stop
        { function_generator_fl_input_choice_wave_type = new Fl_Input_Choice(600, 200, 180, 60, "Wave Type");
          function_generator_fl_input_choice_wave_type->callback((Fl_Callback*)cb_function_generator_fl_input_choice_wave_type, (void*)(0));
          function_generator_fl_input_choice_wave_type->align(Fl_Align(FL_ALIGN_TOP));
          function_generator_fl_input_choice_wave_type->menu(menu_function_generator_fl_input_choice_wave_type);
          function_generator_fl_input_choice_wave_type->value (LABSOFT_FUNCTION_GENERATOR_WAVE_TYPE);
        } // Fl_Input_Choice* function_generator_fl_input_choice_wave_type
        { function_generator_fl_input_choice_frequency = new Fl_Input_Choice(900, 200, 180, 60, "Frequency");
          function_generator_fl_input_choice_frequency->callback((Fl_Callback*)cb_function_generator_fl_input_choice_frequency, (void*)(0));
          function_generator_fl_input_choice_frequency->align(Fl_Align(FL_ALIGN_TOP));
          function_generator_fl_input_choice_frequency->menu(menu_function_generator_fl_input_choice_frequency);
          function_generator_fl_input_choice_frequency->value (LABSOFT_FUNCTION_GENERATOR_FREQUENCY);
        } // Fl_Input_Choice* function_generator_fl_input_choice_frequency
        { function_generator_fl_input_choice_period = new Fl_Input_Choice(300, 350, 180, 60, "Period");
          function_generator_fl_input_choice_period->callback((Fl_Callback*)cb_function_generator_fl_input_choice_period, (void*)(0));
          function_generator_fl_input_choice_period->align(Fl_Align(FL_ALIGN_TOP));
          function_generator_fl_input_choice_period->deactivate();
          function_generator_fl_input_choice_period->menu(menu_function_generator_fl_input_choice_period);
          function_generator_fl_input_choice_period->value (LABSOFT_FUNCTION_GENERATOR_PERIOD);
        } // Fl_Input_Choice* function_generator_fl_input_choice_period
        { function_generator_fl_input_choice_amplitude = new Fl_Input_Choice(600, 350, 180, 60, "Amplitude");
          function_generator_fl_input_choice_amplitude->callback((Fl_Callback*)cb_function_generator_fl_input_choice_amplitude, (void*)(0));
          function_generator_fl_input_choice_amplitude->align(Fl_Align(FL_ALIGN_TOP));
          function_generator_fl_input_choice_amplitude->menu(menu_function_generator_fl_input_choice_amplitude);
          function_generator_fl_input_choice_amplitude->value (LABSOFT_FUNCTION_GENERATOR_AMPLITUDE);
        } // Fl_Input_Choice* function_generator_fl_input_choice_amplitude
        { function_generator_fl_input_choice_offset = new Fl_Input_Choice(900, 350, 180, 60, "Vertical Offset");
          function_generator_fl_input_choice_offset->callback((Fl_Callback*)cb_function_generator_fl_input_choice_offset, (void*)(0));
          function_generator_fl_input_choice_offset->align(Fl_Align(FL_ALIGN_TOP));
          function_generator_fl_input_choice_offset->menu(menu_function_generator_fl_input_choice_offset);
          function_generator_fl_input_choice_offset->value (LABSOFT_FUNCTION_GENERATOR_Y_OFFSET);
        } // Fl_Input_Choice* function_generator_fl_input_choice_offset
        { function_generator_fl_input_choice_duty_cycle = new Fl_Input_Choice(300, 500, 180, 60, "Duty Cycle");
          function_generator_fl_input_choice_duty_cycle->callback((Fl_Callback*)cb_function_generator_fl_input_choice_duty_cycle, (void*)(0));
          function_generator_fl_input_choice_duty_cycle->align(Fl_Align(FL_ALIGN_TOP));
          function_generator_fl_input_choice_duty_cycle->deactivate();
          function_generator_fl_input_choice_duty_cycle->menu(menu_function_generator_fl_input_choice_duty_cycle);
          function_generator_fl_input_choice_duty_cycle->value (LABSOFT_FUNCTION_GENERATOR_DUTY_CYCLE);
        } // Fl_Input_Choice* function_generator_fl_input_choice_duty_cycle
        { function_generator_fl_input_choice_phase = new Fl_Input_Choice(600, 500, 180, 60, "Phase");
          function_generator_fl_input_choice_phase->callback((Fl_Callback*)cb_function_generator_fl_input_choice_phase, (void*)(0));
          function_generator_fl_input_choice_phase->align(Fl_Align(FL_ALIGN_TOP));
          function_generator_fl_input_choice_phase->menu(menu_function_generator_fl_input_choice_phase);
          function_generator_fl_input_choice_phase->value (LABSOFT_FUNCTION_GENERATOR_PHASE);
        } // Fl_Input_Choice* function_generator_fl_input_choice_phase
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 60, 1366, 708, "Logic Analyzer");
        o->hide();
        { new Fl_Button(50, 84, 120, 60, "Single");
        } // Fl_Button* o
        { logic_analyzer_fl_light_button_master_run_stop = new Fl_Light_Button(200, 84, 120, 60, "Run");
          logic_analyzer_fl_light_button_master_run_stop->callback((Fl_Callback*)cb_logic_analyzer_fl_light_button_master_run_stop);
          logic_analyzer_fl_light_button_master_run_stop->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* logic_analyzer_fl_light_button_master_run_stop
        { logic_analyzer_fl_input_choice_memory_depth = new Fl_Input_Choice(350, 94, 120, 30, "Memory Depth");
          logic_analyzer_fl_input_choice_memory_depth->align(Fl_Align(FL_ALIGN_TOP));
          logic_analyzer_fl_input_choice_memory_depth->menu(menu_logic_analyzer_fl_input_choice_memory_depth);
        } // Fl_Input_Choice* logic_analyzer_fl_input_choice_memory_depth
        { logic_analyzer_fl_input_choice_sample_rate = new Fl_Input_Choice(500, 94, 120, 30, "Sample Rate");
          logic_analyzer_fl_input_choice_sample_rate->align(Fl_Align(FL_ALIGN_TOP));
          logic_analyzer_fl_input_choice_sample_rate->menu(menu_logic_analyzer_fl_input_choice_sample_rate);
        } // Fl_Input_Choice* logic_analyzer_fl_input_choice_sample_rate
        { logic_analyzer_fl_input_choice_time_per_division = new Fl_Input_Choice(650, 94, 120, 30, "Time per Division");
          logic_analyzer_fl_input_choice_time_per_division->align(Fl_Align(FL_ALIGN_TOP));
          logic_analyzer_fl_input_choice_time_per_division->menu(menu_logic_analyzer_fl_input_choice_time_per_division);
        } // Fl_Input_Choice* logic_analyzer_fl_input_choice_time_per_division
        { logic_analyzer_fl_input_choice_position = new Fl_Input_Choice(800, 94, 120, 30, "Position");
          logic_analyzer_fl_input_choice_position->align(Fl_Align(FL_ALIGN_TOP));
          logic_analyzer_fl_input_choice_position->menu(menu_logic_analyzer_fl_input_choice_position);
        } // Fl_Input_Choice* logic_analyzer_fl_input_choice_position
        { logic_analyzer_labsoft_logic_analyzer_display_group_display = new LABSoft_Logic_Analyzer_Display_Group(43, 180, 1280, 540);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->box(FL_DOWN_BOX);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->color(FL_BACKGROUND2_COLOR);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->selection_color(FL_BACKGROUND_COLOR);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->labeltype(FL_NORMAL_LABEL);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->labelfont(0);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->labelsize(14);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->labelcolor(FL_FOREGROUND_COLOR);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->align(Fl_Align(FL_ALIGN_TOP));
          logic_analyzer_labsoft_logic_analyzer_display_group_display->when(FL_WHEN_RELEASE);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->end();
        } // LABSoft_Logic_Analyzer_Display_Group* logic_analyzer_labsoft_logic_analyzer_display_group_display
        { logic_analyzer_fl_choice_display_mode = new Fl_Choice(950, 94, 120, 30, "Display Mode");
          logic_analyzer_fl_choice_display_mode->down_box(FL_BORDER_BOX);
          logic_analyzer_fl_choice_display_mode->align(Fl_Align(FL_ALIGN_TOP));
          logic_analyzer_fl_choice_display_mode->menu(menu_logic_analyzer_fl_choice_display_mode);
        } // Fl_Choice* logic_analyzer_fl_choice_display_mode
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 60, 1366, 708, "Circuit Checker");
        o->hide();
        { circuit_checker_fl_button_choose_circuit_checker_file = new Fl_Button(203, 180, 300, 120, "Choose Circuit   Checker File");
          circuit_checker_fl_button_choose_circuit_checker_file->labelsize(24);
          circuit_checker_fl_button_choose_circuit_checker_file->callback((Fl_Callback*)cb_circuit_checker_fl_button_choose_circuit_checker_file);
          circuit_checker_fl_button_choose_circuit_checker_file->align(Fl_Align(FL_ALIGN_WRAP));
        } // Fl_Button* circuit_checker_fl_button_choose_circuit_checker_file
        { circuit_checker_fl_button_start_circuit_checking = new Fl_Button(533, 180, 300, 120, "Start Circuit Checking");
          circuit_checker_fl_button_start_circuit_checking->labelsize(24);
          circuit_checker_fl_button_start_circuit_checking->callback((Fl_Callback*)cb_circuit_checker_fl_button_start_circuit_checking);
        } // Fl_Button* circuit_checker_fl_button_start_circuit_checking
        { circuit_checker_fl_output_selected_circuit_checker_file = new Fl_Output(863, 160, 300, 60, "Selected Circuit Checker File");
          circuit_checker_fl_output_selected_circuit_checker_file->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Output* circuit_checker_fl_output_selected_circuit_checker_file
        { circuit_checker_fl_output_similarity_score = new Fl_Output(863, 250, 300, 60, "Similarity Score");
          circuit_checker_fl_output_similarity_score->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Output* circuit_checker_fl_output_similarity_score
        { circuit_checker_fl_text_display_logger = new Fl_Text_Display(203, 340, 960, 240);
        } // Fl_Text_Display* circuit_checker_fl_text_display_logger
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { alignment_guides = new Fl_Group(0, 0, 1366, 768);
      alignment_guides->hide();
      alignment_guides->deactivate();
      { inner_height = new Fl_Box(0, 35, 1366, 366);
        inner_height->box(FL_UP_FRAME);
        inner_height->color(FL_RED);
      } // Fl_Box* inner_height
      { outer_height = new Fl_Box(0, 0, 1366, 384);
        outer_height->box(FL_DOWN_FRAME);
        outer_height->color(FL_YELLOW);
      } // Fl_Box* outer_height
      { inner_height_crosswise = new Fl_Box(0, 0, 683, 768);
        inner_height_crosswise->box(FL_UP_FRAME);
        inner_height_crosswise->color(FL_RED);
      } // Fl_Box* inner_height_crosswise
      alignment_guides->end();
    } // Fl_Group* alignment_guides
    main_fl_window->end();
  } // Fl_Double_Window* main_fl_window
}
