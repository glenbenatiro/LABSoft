// generated by Fast Light User Interface Designer (fluid) version 1.0305

#include "LABSoft_GUI.h"
#include "../LABSoft_Controller/LABSoft_Controller.h"

void LABSoft_GUI::cb_Exit_i(Fl_Menu_* o, void* v) {
  m_LABSoft_Controller->m_Main_Window.cb_workspace_exit (o, v);
}
void LABSoft_GUI::cb_Exit(Fl_Menu_* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->user_data()))->cb_Exit_i(o,v);
}

void LABSoft_GUI::cb_Browse_i(Fl_Menu_* o, void* v) {
  m_LABSoft_Controller->m_Main_Window.cb_help_about (o, v);
}
void LABSoft_GUI::cb_Browse(Fl_Menu_* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->user_data()))->cb_Browse_i(o,v);
}

void LABSoft_GUI::cb_About_i(Fl_Menu_* o, void* v) {
  m_LABSoft_Controller->m_Main_Window.cb_help_about (o, v);
}
void LABSoft_GUI::cb_About(Fl_Menu_* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->user_data()))->cb_About_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_[] = {
 {"Workspace", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Export", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Exit", 0,  (Fl_Callback*)LABSoft_GUI::cb_Exit, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Settings", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Help", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Browse", 0,  (Fl_Callback*)LABSoft_GUI::cb_Browse, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"About", 0,  (Fl_Callback*)LABSoft_GUI::cb_About, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* LABSoft_GUI::main_menuitem_export = LABSoft_GUI::menu_ + 1;

void LABSoft_GUI::cb_main_fl_tabs_i(Fl_Tabs* o, void* v) {
  m_LABSoft_Controller->cb_main_fl_tabs (o, v);
}
void LABSoft_GUI::cb_main_fl_tabs(Fl_Tabs* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->user_data()))->cb_main_fl_tabs_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_button_record_i(Fl_Button* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_record (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_button_record(Fl_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_button_record_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_light_button_run_stop_i(Fl_Light_Button* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_run_stop (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_light_button_run_stop(Fl_Light_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_light_button_run_stop_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_button_record_config_i(Fl_Button* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_record_config (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_button_record_config(Fl_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_button_record_config_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_button_single_i(Fl_Button* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_single (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_button_single(Fl_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_button_single_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_labsoft_oscilloscope_display_display_i(LABSoft_GUI_Oscilloscope_Display* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_display (o, v);
}
void LABSoft_GUI::cb_oscilloscope_labsoft_oscilloscope_display_display(LABSoft_GUI_Oscilloscope_Display* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_labsoft_oscilloscope_display_display_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_toggle_button_c1_selector_i(Fl_Button*, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_channel_selector (0, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_toggle_button_c1_selector(Fl_Button* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_toggle_button_c1_selector_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_toggle_button_c2_selector_i(Fl_Button*, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_channel_selector (0, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_toggle_button_c2_selector(Fl_Button* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_toggle_button_c2_selector_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_slider_vertical_offset_i(Fl_Slider* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_fl_slider_vertical_offset (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_slider_vertical_offset(Fl_Slider* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_slider_vertical_offset_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_light_button_channel_0_enable_i(Fl_Light_Button* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_channel_enable_disable (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_light_button_channel_0_enable(Fl_Light_Button* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_light_button_channel_0_enable_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_light_button_channel_0_ac_coupling_i(Fl_Light_Button* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_ac_coupling (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_light_button_channel_0_ac_coupling(Fl_Light_Button* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_light_button_channel_0_ac_coupling_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling_i(LABSoft_GUI_Fl_Choice_With_Scroll* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_scaling (o, v);
}
void LABSoft_GUI::cb_oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling(LABSoft_GUI_Fl_Choice_With_Scroll* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling[] = {
 {"x4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"x1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"x0.5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"x0.25", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division_i(LABSoft_GUI_Fl_Input_Choice_With_Scroll* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_voltage_per_division (o, v);
}
void LABSoft_GUI::cb_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division(LABSoft_GUI_Fl_Input_Choice_With_Scroll* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division[] = {
 {"5 V", 0,  0, (void*)("5.0"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, (void*)("2.0"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, (void*)("1.0"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 mV", 0,  0, (void*)("0.5"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 mV", 0,  0, (void*)("0.2"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 mV", 0,  0, (void*)("0.1"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 mV", 0,  0, (void*)("0.05"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 mV", 0,  0, (void*)("0.02"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 mV", 0,  0, (void*)("0.1"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 mV", 0,  0, (void*)("0.005"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 mV", 0,  0, (void*)("0.002"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 mV", 0,  0, (void*)("0.001"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 uV", 0,  0, (void*)("0.0005"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 uV", 0,  0, (void*)("0.0002"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 uV", 0,  0, (void*)("0.0001"), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset_i(LABSoft_GUI_Fl_Input_Choice_With_Scroll* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_vertical_offset (o, v);
}
void LABSoft_GUI::cb_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset(LABSoft_GUI_Fl_Input_Choice_With_Scroll* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset[] = {
 {"25 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-10 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-20 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-50 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-100 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-200 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-500 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-10 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-25 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_light_button_channel_1_enable_i(Fl_Light_Button* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_channel_enable_disable (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_light_button_channel_1_enable(Fl_Light_Button* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_light_button_channel_1_enable_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_light_button_channel_1_ac_coupling_i(Fl_Light_Button* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_ac_coupling (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_light_button_channel_1_ac_coupling(Fl_Light_Button* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_light_button_channel_1_ac_coupling_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling_i(LABSoft_GUI_Fl_Choice_With_Scroll* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_scaling (o, v);
}
void LABSoft_GUI::cb_oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling(LABSoft_GUI_Fl_Choice_With_Scroll* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling[] = {
 {"x4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"x1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"x0.5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"x0.25", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division_i(LABSoft_GUI_Fl_Input_Choice_With_Scroll* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_voltage_per_division (o, v);
}
void LABSoft_GUI::cb_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division(LABSoft_GUI_Fl_Input_Choice_With_Scroll* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division[] = {
 {"5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 uV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 uV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 uV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset_i(LABSoft_GUI_Fl_Input_Choice_With_Scroll* o, long v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_vertical_offset (o, v);
}
void LABSoft_GUI::cb_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset(LABSoft_GUI_Fl_Input_Choice_With_Scroll* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset[] = {
 {"25 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-10 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-20 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-50 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-100 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-200 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-500 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-10 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-25 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_input_choice_horizontal_offset_i(Fl_Input_Choice* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_horizontal_offset (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_input_choice_horizontal_offset(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_input_choice_horizontal_offset_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_input_choice_horizontal_offset[] = {
 {"100s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-10 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-20 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-50 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-100 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-200 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-500 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-10 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-20 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-50 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-100 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-200 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-500 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-10 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-20 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-50 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-100 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_input_choice_time_per_division_i(Fl_Input_Choice* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_time_per_division (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_input_choice_time_per_division(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_input_choice_time_per_division_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_input_choice_time_per_division[] = {
 {"200 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"120 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"60 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"30 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 us/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 us/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 us/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 us/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 us/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 us/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 us/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 us/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 us/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_input_choice_samples_i(Fl_Input_Choice* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_samples (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_input_choice_samples(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_input_choice_samples_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_input_choice_samples[] = {
 {"2000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_input_choice_sampling_rate_i(Fl_Input_Choice* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_sampling_rate (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_input_choice_sampling_rate(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_input_choice_sampling_rate_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_input_choice_sampling_rate[] = {
 {"6.67 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"16.67 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"40 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"400 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"40 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_choice_trigger_mode_i(Fl_Choice* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_trigger_mode (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_choice_trigger_mode(Fl_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_choice_trigger_mode_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_choice_trigger_mode[] = {
 {"None", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Normal", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Auto", 0,  0, 0, 1, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_choice_trigger_source_i(Fl_Choice* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_trigger_source (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_choice_trigger_source(Fl_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_choice_trigger_source_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_choice_trigger_source[] = {
 {"Channel 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Channel 2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_choice_trigger_type_i(Fl_Choice* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_trigger_type (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_choice_trigger_type(Fl_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_choice_trigger_type_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_choice_trigger_type[] = {
 {"Edge", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_choice_trigger_condition_i(Fl_Choice* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_trigger_condition (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_choice_trigger_condition(Fl_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_choice_trigger_condition_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_choice_trigger_condition[] = {
 {"Rising", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Falling", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Either", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_input_choice_trigger_level_i(Fl_Input_Choice* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_trigger_level (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_input_choice_trigger_level(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_input_choice_trigger_level_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_input_choice_trigger_level[] = {
 {"25 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-10 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-20 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-50 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-100 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-200 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-500 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-10 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-25 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_choice_mode_i(Fl_Choice* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_mode (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_choice_mode(Fl_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_oscilloscope_fl_choice_mode_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_oscilloscope_fl_choice_mode[] = {
 {"Repeated", 0,  0, (void*)(LABE::OSC::MODE::REPEATED), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Screen", 0,  0, (void*)(LABE::OSC::MODE::SCREEN), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Record", 0,  0, (void*)(LABE::OSC::MODE::RECORD), 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_voltmeter_fl_light_button_run_stop_i(Fl_Light_Button* o, void* v) {
  m_LABSoft_Controller->m_Voltmeter.cb_run_stop (o, v);
}
void LABSoft_GUI::cb_voltmeter_fl_light_button_run_stop(Fl_Light_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_voltmeter_fl_light_button_run_stop_i(o,v);
}

void LABSoft_GUI::cb_function_generator_fl_choice_wave_type_i(Fl_Choice* o, long v) {
  m_LABSoft_Controller->m_Function_Generator.cb_wave_type (o, v);
}
void LABSoft_GUI::cb_function_generator_fl_choice_wave_type(Fl_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_choice_wave_type_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_choice_wave_type[] = {
 {"Sine", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Triangle", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Square", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"DC", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_amplitude_i(Fl_Input_Choice* o, long v) {
  m_LABSoft_Controller->m_Function_Generator.cb_amplitude (o, v);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_amplitude(Fl_Input_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_amplitude_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_amplitude[] = {
 {"3.5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3.3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 mV", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_frequency_i(Fl_Input_Choice* o, long v) {
  m_LABSoft_Controller->m_Function_Generator.cb_frequency (o, v);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_frequency(Fl_Input_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_frequency_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_frequency[] = {
 {"1 MHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 mHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_period_i(Fl_Input_Choice* o, long v) {
  m_LABSoft_Controller->m_Function_Generator.cb_period (o, v);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_period(Fl_Input_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_period_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_period[] = {
 {"5 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_phase_i(Fl_Input_Choice* o, long v) {
  m_LABSoft_Controller->m_Function_Generator.cb_phase (o, v);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_phase(Fl_Input_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_phase_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_phase[] = {
 {"-360 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-180 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-90 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-45 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-30 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+30 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+45 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+60 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+90 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+180 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"+360 deg", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_input_choice_offset_i(Fl_Input_Choice* o, long v) {
  m_LABSoft_Controller->m_Function_Generator.cb_vertical_offset (o, v);
}
void LABSoft_GUI::cb_function_generator_fl_input_choice_offset(Fl_Input_Choice* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_input_choice_offset_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_function_generator_fl_input_choice_offset[] = {
 {"5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-2 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-3 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-4 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-5 V", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_function_generator_fl_light_button_run_stop_i(Fl_Light_Button* o, long v) {
  m_LABSoft_Controller->m_Function_Generator.cb_run_stop (o, v);
}
void LABSoft_GUI::cb_function_generator_fl_light_button_run_stop(Fl_Light_Button* o, long v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_function_generator_fl_light_button_run_stop_i(o,v);
}

void LABSoft_GUI::cb_logic_analyzer_fl_light_button_run_stop_i(Fl_Light_Button* o, void* v) {
  m_LABSoft_Controller->m_Logic_Analyzer.cb_run_stop (o, v);
}
void LABSoft_GUI::cb_logic_analyzer_fl_light_button_run_stop(Fl_Light_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_logic_analyzer_fl_light_button_run_stop_i(o,v);
}

void LABSoft_GUI::cb_logic_analyzer_fl_input_choice_memory_depth_i(Fl_Input_Choice* o, void* v) {
  m_LABSoft_Controller->m_Logic_Analyzer.cb_memory_depth (o, v);
}
void LABSoft_GUI::cb_logic_analyzer_fl_input_choice_memory_depth(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_logic_analyzer_fl_input_choice_memory_depth_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_logic_analyzer_fl_input_choice_memory_depth[] = {
 {"2000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"512", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"256", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"128", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"64", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"32", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_logic_analyzer_fl_input_choice_sampling_rate_i(Fl_Input_Choice* o, void* v) {
  m_LABSoft_Controller->m_Logic_Analyzer.cb_sampling_rate (o, v);
}
void LABSoft_GUI::cb_logic_analyzer_fl_input_choice_sampling_rate(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_logic_analyzer_fl_input_choice_sampling_rate_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_logic_analyzer_fl_input_choice_sampling_rate[] = {
 {"50 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"6.67 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"16.67 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"40 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"400 Hz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"40 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 kHz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_logic_analyzer_fl_input_choice_time_per_division_i(Fl_Input_Choice* o, void* v) {
  m_LABSoft_Controller->m_Logic_Analyzer.cb_time_per_division (o, v);
}
void LABSoft_GUI::cb_logic_analyzer_fl_input_choice_time_per_division(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_logic_analyzer_fl_input_choice_time_per_division_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_logic_analyzer_fl_input_choice_time_per_division[] = {
 {"20 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 ms/div", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"30 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"20 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"10 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 us", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_logic_analyzer_fl_input_choice_position_i(Fl_Input_Choice* o, void* v) {
  m_LABSoft_Controller->m_Logic_Analyzer.cb_horizontal_offset (o, v);
}
void LABSoft_GUI::cb_logic_analyzer_fl_input_choice_position(Fl_Input_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_logic_analyzer_fl_input_choice_position_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_logic_analyzer_fl_input_choice_position[] = {
 {"5 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 s", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"500 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"200 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"100 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"50 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-500 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-200 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-100 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-50 ms", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_logic_analyzer_fl_choice_display_mode_i(Fl_Choice* o, void* v) {
  m_LABSoft_Controller->m_Logic_Analyzer.cb_display_mode (o, v);
}
void LABSoft_GUI::cb_logic_analyzer_fl_choice_display_mode(Fl_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_logic_analyzer_fl_choice_display_mode_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_logic_analyzer_fl_choice_display_mode[] = {
 {"Repeated", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Screen", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_circuit_checker_fl_button_choose_circuit_checker_file_i(Fl_Button* o, void* v) {
  m_LABSoft_Controller->m_Circuit_Checker.cb_fl_button_choose_circuit_checker_file (o, v);
}
void LABSoft_GUI::cb_circuit_checker_fl_button_choose_circuit_checker_file(Fl_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_circuit_checker_fl_button_choose_circuit_checker_file_i(o,v);
}

void LABSoft_GUI::cb_circuit_checker_fl_button_start_circuit_checking_i(Fl_Button* o, void* v) {
  m_LABSoft_Controller->m_Circuit_Checker.cb_fl_button_start_circuit_checking (o, v);
}
void LABSoft_GUI::cb_circuit_checker_fl_button_start_circuit_checking(Fl_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_circuit_checker_fl_button_start_circuit_checking_i(o,v);
}

void LABSoft_GUI::cb_digital_circuit_checker_fl_button_load_file_i(Fl_Button* o, void* v) {
  m_LABSoft_Controller->m_Digital_Circuit_Checker.cb_load_file (o, v);
}
void LABSoft_GUI::cb_digital_circuit_checker_fl_button_load_file(Fl_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_digital_circuit_checker_fl_button_load_file_i(o,v);
}

void LABSoft_GUI::cb_digital_circuit_checker_fl_button_unload_file_i(Fl_Button* o, void* v) {
  m_LABSoft_Controller->m_Digital_Circuit_Checker.cb_unload_file (o, v);
}
void LABSoft_GUI::cb_digital_circuit_checker_fl_button_unload_file(Fl_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_digital_circuit_checker_fl_button_unload_file_i(o,v);
}

void LABSoft_GUI::cb_digital_circuit_checker_fl_button_run_checker_i(Fl_Button* o, void* v) {
  m_LABSoft_Controller->m_Digital_Circuit_Checker.cb_run_checker (o, v);
}
void LABSoft_GUI::cb_digital_circuit_checker_fl_button_run_checker(Fl_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_digital_circuit_checker_fl_button_run_checker_i(o,v);
}

void LABSoft_GUI::cb_digital_fl_choice_input_bits_i(Fl_Choice* o, void* v) {
  m_LABSoft_Controller->m_LABChecker_Digital.cb_digital_input_bits (o, v);
}
void LABSoft_GUI::cb_digital_fl_choice_input_bits(Fl_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_digital_fl_choice_input_bits_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_digital_fl_choice_input_bits[] = {
 {"1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"6", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"7", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_digital_fl_choice_output_bits_i(Fl_Choice* o, void* v) {
  m_LABSoft_Controller->m_LABChecker_Digital.cb_digital_output_bits (o, v);
}
void LABSoft_GUI::cb_digital_fl_choice_output_bits(Fl_Choice* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_digital_fl_choice_output_bits_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_digital_fl_choice_output_bits[] = {
 {"1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"6", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"7", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_digital_fl_input_output_count_i(Fl_Input* o, void* v) {
  m_LABSoft_Controller->m_LABChecker_Digital.cb_digital_output_count (o, v);
}
void LABSoft_GUI::cb_digital_fl_input_output_count(Fl_Input* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_digital_fl_input_output_count_i(o,v);
}

void LABSoft_GUI::cb_digital_fl_button_create_file_i(Fl_Button* o, void* v) {
  m_LABSoft_Controller->m_LABChecker_Digital.cb_digital_create_file (o, v);
}
void LABSoft_GUI::cb_digital_fl_button_create_file(Fl_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->parent()->user_data()))->cb_digital_fl_button_create_file_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_Samples[] = {
 {"1 Mi", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"512 Ki", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"256 Ki", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"128 Ki", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"64 Ki", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"32 Ki", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"16 Ki", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"8 Ki", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"4 Ki", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2 Ki", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"1 Ki", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"512", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"256", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"128", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"64", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"32", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_oscilloscope_fl_button_record_config_start_i(Fl_Button* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_record_config_start (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_button_record_config_start(Fl_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->user_data()))->cb_oscilloscope_fl_button_record_config_start_i(o,v);
}

void LABSoft_GUI::cb_oscilloscope_fl_button_record_config_cancel_i(Fl_Button* o, void* v) {
  m_LABSoft_Controller->m_Oscilloscope.cb_record_config_cancel (o, v);
}
void LABSoft_GUI::cb_oscilloscope_fl_button_record_config_cancel(Fl_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->parent()->user_data()))->cb_oscilloscope_fl_button_record_config_cancel_i(o,v);
}

Fl_Menu_Item LABSoft_GUI::menu_Source[] = {
 {"Oscilloscope", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Channel 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Channel 2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LABSoft_GUI::cb_Close_i(Fl_Button* o, void* v) {
  m_LABSoft_Controller->m_Main_Window.cb_help_about_win_close (o, v);
}
void LABSoft_GUI::cb_Close(Fl_Button* o, void* v) {
  ((LABSoft_GUI*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

LABSoft_GUI::LABSoft_GUI() {
  { main_fl_window = new Fl_Double_Window(1365, 765, "LABSoft (for Educators)");
    main_fl_window->color((Fl_Color)55);
    main_fl_window->user_data((void*)(this));
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 1366, 30);
      o->box(FL_FLAT_BOX);
      o->color(FL_LIGHT3);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { main_fl_tabs = new Fl_Tabs(0, 30, 1366, 738);
      main_fl_tabs->box(FL_FLAT_BOX);
      main_fl_tabs->color((Fl_Color)55);
      main_fl_tabs->selection_color(FL_LIGHT3);
      main_fl_tabs->callback((Fl_Callback*)cb_main_fl_tabs);
      { main_fl_group_home_tab = new Fl_Group(0, 60, 1366, 708, "Home");
        main_fl_group_home_tab->color(FL_LIGHT3);
        main_fl_group_home_tab->selection_color(FL_LIGHT2);
        main_fl_group_home_tab->hide();
        { Fl_Box* o = new Fl_Box(0, 0, 1366, 768, "LABSoft 1.0");
          o->color(FL_LIGHT3);
          o->selection_color(FL_BACKGROUND2_COLOR);
          o->labelsize(60);
          o->labelcolor(FL_LIGHT1);
        } // Fl_Box* o
        main_fl_group_home_tab->end();
      } // Fl_Group* main_fl_group_home_tab
      { main_fl_group_oscilloscope_tab = new Fl_Group(0, 60, 1366, 708, "Oscilloscope");
        main_fl_group_oscilloscope_tab->color(FL_LIGHT3);
        main_fl_group_oscilloscope_tab->selection_color(FL_LIGHT2);
        { oscilloscope_fl_button_record = new Fl_Button(1205, 95, 120, 60, "Record");
          oscilloscope_fl_button_record->box(FL_GTK_UP_BOX);
          oscilloscope_fl_button_record->color((Fl_Color)53);
          oscilloscope_fl_button_record->callback((Fl_Callback*)cb_oscilloscope_fl_button_record);
          oscilloscope_fl_button_record->hide();
        } // Fl_Button* oscilloscope_fl_button_record
        { oscilloscope_fl_light_button_run_stop = new Fl_Light_Button(1205, 95, 120, 60, "Run");
          oscilloscope_fl_light_button_run_stop->box(FL_GTK_UP_BOX);
          oscilloscope_fl_light_button_run_stop->color((Fl_Color)53);
          oscilloscope_fl_light_button_run_stop->selection_color(FL_GREEN);
          oscilloscope_fl_light_button_run_stop->callback((Fl_Callback*)cb_oscilloscope_fl_light_button_run_stop);
          oscilloscope_fl_light_button_run_stop->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* oscilloscope_fl_light_button_run_stop
        { oscilloscope_fl_button_record_config = new Fl_Button(1205, 180, 120, 60, "Config");
          oscilloscope_fl_button_record_config->box(FL_GTK_UP_BOX);
          oscilloscope_fl_button_record_config->color((Fl_Color)53);
          oscilloscope_fl_button_record_config->callback((Fl_Callback*)cb_oscilloscope_fl_button_record_config);
          oscilloscope_fl_button_record_config->hide();
        } // Fl_Button* oscilloscope_fl_button_record_config
        { oscilloscope_fl_button_single = new Fl_Button(1205, 180, 120, 60, "Single");
          oscilloscope_fl_button_single->box(FL_GTK_UP_BOX);
          oscilloscope_fl_button_single->color((Fl_Color)53);
          oscilloscope_fl_button_single->callback((Fl_Callback*)cb_oscilloscope_fl_button_single);
        } // Fl_Button* oscilloscope_fl_button_single
        { oscilloscope_labsoft_oscilloscope_display_group_display = new LABSoft_GUI_Oscilloscope_Display_Group(24, 84, 800, 660);
          oscilloscope_labsoft_oscilloscope_display_group_display->box(FL_FLAT_BOX);
          oscilloscope_labsoft_oscilloscope_display_group_display->color(FL_FOREGROUND_COLOR);
          oscilloscope_labsoft_oscilloscope_display_group_display->selection_color(FL_BACKGROUND_COLOR);
          oscilloscope_labsoft_oscilloscope_display_group_display->labeltype(FL_NORMAL_LABEL);
          oscilloscope_labsoft_oscilloscope_display_group_display->labelfont(0);
          oscilloscope_labsoft_oscilloscope_display_group_display->labelsize(14);
          oscilloscope_labsoft_oscilloscope_display_group_display->labelcolor(FL_FOREGROUND_COLOR);
          oscilloscope_labsoft_oscilloscope_display_group_display->align(Fl_Align(FL_ALIGN_TOP));
          oscilloscope_labsoft_oscilloscope_display_group_display->when(FL_WHEN_RELEASE);
          { oscilloscope_labsoft_oscilloscope_display_display = new LABSoft_GUI_Oscilloscope_Display(106, 109, 700, 610, "display label");
            oscilloscope_labsoft_oscilloscope_display_display->box(FL_FLAT_BOX);
            oscilloscope_labsoft_oscilloscope_display_display->color((Fl_Color)37);
            oscilloscope_labsoft_oscilloscope_display_display->selection_color(FL_BACKGROUND_COLOR);
            oscilloscope_labsoft_oscilloscope_display_display->labeltype(FL_NORMAL_LABEL);
            oscilloscope_labsoft_oscilloscope_display_display->labelfont(0);
            oscilloscope_labsoft_oscilloscope_display_display->labelsize(14);
            oscilloscope_labsoft_oscilloscope_display_display->labelcolor(FL_FOREGROUND_COLOR);
            oscilloscope_labsoft_oscilloscope_display_display->callback((Fl_Callback*)cb_oscilloscope_labsoft_oscilloscope_display_display);
            oscilloscope_labsoft_oscilloscope_display_display->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_labsoft_oscilloscope_display_display->when(FL_WHEN_RELEASE);
          } // LABSoft_GUI_Oscilloscope_Display* oscilloscope_labsoft_oscilloscope_display_display
          { oscilloscope_fl_box_display_status = new Fl_Box(106, 84, 90, 25, "Ready");
            oscilloscope_fl_box_display_status->box(FL_BORDER_FRAME);
            oscilloscope_fl_box_display_status->color((Fl_Color)1);
            oscilloscope_fl_box_display_status->labelfont(1);
            oscilloscope_fl_box_display_status->labelsize(10);
            oscilloscope_fl_box_display_status->labelcolor(FL_BACKGROUND2_COLOR);
          } // Fl_Box* oscilloscope_fl_box_display_status
          { oscilloscope_fl_toggle_button_c1_selector = new Fl_Button(200, 84, 25, 25, "C1");
            oscilloscope_fl_toggle_button_c1_selector->type(1);
            oscilloscope_fl_toggle_button_c1_selector->color((Fl_Color)3);
            oscilloscope_fl_toggle_button_c1_selector->selection_color((Fl_Color)3);
            oscilloscope_fl_toggle_button_c1_selector->labelsize(12);
            oscilloscope_fl_toggle_button_c1_selector->callback((Fl_Callback*)cb_oscilloscope_fl_toggle_button_c1_selector, (void*)(0));
          } // Fl_Button* oscilloscope_fl_toggle_button_c1_selector
          { oscilloscope_fl_toggle_button_c2_selector = new Fl_Button(225, 84, 25, 25, "C2");
            oscilloscope_fl_toggle_button_c2_selector->type(1);
            oscilloscope_fl_toggle_button_c2_selector->color(FL_FOREGROUND_COLOR);
            oscilloscope_fl_toggle_button_c2_selector->selection_color((Fl_Color)6);
            oscilloscope_fl_toggle_button_c2_selector->labelsize(12);
            oscilloscope_fl_toggle_button_c2_selector->labelcolor((Fl_Color)6);
            oscilloscope_fl_toggle_button_c2_selector->callback((Fl_Callback*)cb_oscilloscope_fl_toggle_button_c2_selector, (void*)(1));
          } // Fl_Button* oscilloscope_fl_toggle_button_c2_selector
          { oscilloscope_fl_box_upper_info_display = new Fl_Box(260, 84, 0, 25, "2000 samples at 200kHz");
            oscilloscope_fl_box_upper_info_display->color(FL_BACKGROUND2_COLOR);
            oscilloscope_fl_box_upper_info_display->labelsize(10);
            oscilloscope_fl_box_upper_info_display->labelcolor(FL_BACKGROUND2_COLOR);
            oscilloscope_fl_box_upper_info_display->align(Fl_Align(FL_ALIGN_RIGHT));
          } // Fl_Box* oscilloscope_fl_box_upper_info_display
          { oscilloscope_fl_slider_horizontal_offset = new Fl_Slider(106, 109, 700, 13);
            oscilloscope_fl_slider_horizontal_offset->type(1);
            oscilloscope_fl_slider_horizontal_offset->box(FL_NO_BOX);
            oscilloscope_fl_slider_horizontal_offset->color(FL_FOREGROUND_COLOR);
            oscilloscope_fl_slider_horizontal_offset->selection_color(FL_LIGHT3);
            oscilloscope_fl_slider_horizontal_offset->labelcolor(FL_INACTIVE_COLOR);
            oscilloscope_fl_slider_horizontal_offset->maximum(4095);
            oscilloscope_fl_slider_horizontal_offset->step(1);
            oscilloscope_fl_slider_horizontal_offset->value(2048);
          } // Fl_Slider* oscilloscope_fl_slider_horizontal_offset
          { oscilloscope_fl_slider_vertical_offset = new Fl_Slider(106, 109, 13, 610);
            oscilloscope_fl_slider_vertical_offset->box(FL_NO_BOX);
            oscilloscope_fl_slider_vertical_offset->color(FL_FOREGROUND_COLOR);
            oscilloscope_fl_slider_vertical_offset->selection_color((Fl_Color)3);
            oscilloscope_fl_slider_vertical_offset->labelcolor(FL_INACTIVE_COLOR);
            oscilloscope_fl_slider_vertical_offset->maximum(4095);
            oscilloscope_fl_slider_vertical_offset->step(1);
            oscilloscope_fl_slider_vertical_offset->value(2048);
            oscilloscope_fl_slider_vertical_offset->callback((Fl_Callback*)cb_oscilloscope_fl_slider_vertical_offset);
          } // Fl_Slider* oscilloscope_fl_slider_vertical_offset
          { oscilloscope_fl_slider_trigger_level = new Fl_Slider(793, 109, 13, 610);
            oscilloscope_fl_slider_trigger_level->box(FL_NO_BOX);
            oscilloscope_fl_slider_trigger_level->color(FL_FOREGROUND_COLOR);
            oscilloscope_fl_slider_trigger_level->selection_color((Fl_Color)3);
            oscilloscope_fl_slider_trigger_level->labelcolor(FL_INACTIVE_COLOR);
            oscilloscope_fl_slider_trigger_level->maximum(4095);
            oscilloscope_fl_slider_trigger_level->step(1);
            oscilloscope_fl_slider_trigger_level->value(2048);
            oscilloscope_fl_slider_trigger_level->deactivate();
          } // Fl_Slider* oscilloscope_fl_slider_trigger_level
          oscilloscope_labsoft_oscilloscope_display_group_display->end();
        } // LABSoft_GUI_Oscilloscope_Display_Group* oscilloscope_labsoft_oscilloscope_display_group_display
        { oscilloscope_fl_group_vertical_channel_0 = new Fl_Group(845, 95, 160, 360, "Channel 1");
          oscilloscope_fl_group_vertical_channel_0->box(FL_ROUNDED_FRAME);
          oscilloscope_fl_group_vertical_channel_0->color(FL_LIGHT2);
          { oscilloscope_fl_light_button_channel_0_enable = new Fl_Light_Button(865, 115, 120, 60, "Ch. 1 Enable");
            oscilloscope_fl_light_button_channel_0_enable->box(FL_GTK_UP_BOX);
            oscilloscope_fl_light_button_channel_0_enable->color((Fl_Color)53);
            oscilloscope_fl_light_button_channel_0_enable->selection_color(FL_GREEN);
            oscilloscope_fl_light_button_channel_0_enable->callback((Fl_Callback*)cb_oscilloscope_fl_light_button_channel_0_enable, (void*)(0));
            oscilloscope_fl_light_button_channel_0_enable->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          } // Fl_Light_Button* oscilloscope_fl_light_button_channel_0_enable
          { oscilloscope_fl_light_button_channel_0_ac_coupling = new Fl_Light_Button(865, 190, 120, 60, "AC Coupling");
            oscilloscope_fl_light_button_channel_0_ac_coupling->box(FL_GTK_UP_BOX);
            oscilloscope_fl_light_button_channel_0_ac_coupling->color((Fl_Color)53);
            oscilloscope_fl_light_button_channel_0_ac_coupling->selection_color(FL_GREEN);
            oscilloscope_fl_light_button_channel_0_ac_coupling->callback((Fl_Callback*)cb_oscilloscope_fl_light_button_channel_0_ac_coupling, (void*)(0));
            oscilloscope_fl_light_button_channel_0_ac_coupling->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          } // Fl_Light_Button* oscilloscope_fl_light_button_channel_0_ac_coupling
          { oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling = new LABSoft_GUI_Fl_Choice_With_Scroll(865, 275, 120, 30, "Scaling");
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling->box(FL_FLAT_BOX);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling->down_box(FL_BORDER_BOX);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling->color((Fl_Color)53);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling->selection_color((Fl_Color)53);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling->labeltype(FL_NORMAL_LABEL);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling->labelfont(0);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling->labelsize(14);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling->labelcolor(FL_FOREGROUND_COLOR);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling->callback((Fl_Callback*)cb_oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling, (void*)(0));
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling->when(FL_WHEN_RELEASE);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling->menu(menu_oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling);
          } // LABSoft_GUI_Fl_Choice_With_Scroll* oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_0_scaling
          { oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division = new LABSoft_GUI_Fl_Input_Choice_With_Scroll(865, 340, 120, 30, "Volts per Division");
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division->box(FL_FLAT_BOX);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division->color((Fl_Color)53);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division->selection_color((Fl_Color)53);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division->labeltype(FL_NORMAL_LABEL);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division->labelfont(0);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division->labelsize(14);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division->labelcolor(FL_FOREGROUND_COLOR);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division->callback((Fl_Callback*)cb_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division, (void*)(0));
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division->when(FL_WHEN_RELEASE);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division->menu(menu_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division->input ()->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
          } // LABSoft_GUI_Fl_Input_Choice_With_Scroll* oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_voltage_per_division
          { oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset = new LABSoft_GUI_Fl_Input_Choice_With_Scroll(865, 405, 120, 30, "Vertical Offset");
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset->box(FL_FLAT_BOX);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset->color((Fl_Color)53);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset->selection_color((Fl_Color)53);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset->labeltype(FL_NORMAL_LABEL);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset->labelfont(0);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset->labelsize(14);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset->labelcolor(FL_FOREGROUND_COLOR);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset->callback((Fl_Callback*)cb_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset, (void*)(0));
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset->when(FL_WHEN_RELEASE);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset->menu(menu_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset->input ()->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
          } // LABSoft_GUI_Fl_Input_Choice_With_Scroll* oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset
          oscilloscope_fl_group_vertical_channel_0->end();
        } // Fl_Group* oscilloscope_fl_group_vertical_channel_0
        { oscilloscope_fl_group_vertical_channel_1 = new Fl_Group(1015, 95, 160, 360, "Channel 2");
          oscilloscope_fl_group_vertical_channel_1->box(FL_ROUNDED_FRAME);
          oscilloscope_fl_group_vertical_channel_1->color(FL_LIGHT2);
          { oscilloscope_fl_light_button_channel_1_enable = new Fl_Light_Button(1035, 115, 120, 60, "Ch. 2 Enable");
            oscilloscope_fl_light_button_channel_1_enable->box(FL_GTK_UP_BOX);
            oscilloscope_fl_light_button_channel_1_enable->color((Fl_Color)53);
            oscilloscope_fl_light_button_channel_1_enable->selection_color(FL_GREEN);
            oscilloscope_fl_light_button_channel_1_enable->callback((Fl_Callback*)cb_oscilloscope_fl_light_button_channel_1_enable, (void*)(1));
            oscilloscope_fl_light_button_channel_1_enable->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          } // Fl_Light_Button* oscilloscope_fl_light_button_channel_1_enable
          { oscilloscope_fl_light_button_channel_1_ac_coupling = new Fl_Light_Button(1035, 190, 120, 60, "AC Coupling");
            oscilloscope_fl_light_button_channel_1_ac_coupling->box(FL_GTK_UP_BOX);
            oscilloscope_fl_light_button_channel_1_ac_coupling->color((Fl_Color)53);
            oscilloscope_fl_light_button_channel_1_ac_coupling->selection_color(FL_GREEN);
            oscilloscope_fl_light_button_channel_1_ac_coupling->callback((Fl_Callback*)cb_oscilloscope_fl_light_button_channel_1_ac_coupling, (void*)(1));
            oscilloscope_fl_light_button_channel_1_ac_coupling->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          } // Fl_Light_Button* oscilloscope_fl_light_button_channel_1_ac_coupling
          { oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling = new LABSoft_GUI_Fl_Choice_With_Scroll(1035, 275, 120, 30, "Scaling");
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling->box(FL_FLAT_BOX);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling->down_box(FL_BORDER_BOX);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling->color((Fl_Color)53);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling->selection_color((Fl_Color)53);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling->labeltype(FL_NORMAL_LABEL);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling->labelfont(0);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling->labelsize(14);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling->labelcolor(FL_FOREGROUND_COLOR);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling->callback((Fl_Callback*)cb_oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling, (void*)(1));
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling->when(FL_WHEN_RELEASE);
            oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling->menu(menu_oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling);
          } // LABSoft_GUI_Fl_Choice_With_Scroll* oscilloscope_labsoft_gui_fl_choice_with_scroll_channel_1_scaling
          { oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division = new LABSoft_GUI_Fl_Input_Choice_With_Scroll(1035, 340, 120, 30, "Volts per Division");
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division->box(FL_FLAT_BOX);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division->color((Fl_Color)53);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division->selection_color((Fl_Color)53);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division->labeltype(FL_NORMAL_LABEL);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division->labelfont(0);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division->labelsize(14);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division->labelcolor(FL_FOREGROUND_COLOR);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division->callback((Fl_Callback*)cb_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division, (void*)(1));
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division->when(FL_WHEN_RELEASE);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division->menu(menu_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division->input ()->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
          } // LABSoft_GUI_Fl_Input_Choice_With_Scroll* oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_voltage_per_division
          { oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset = new LABSoft_GUI_Fl_Input_Choice_With_Scroll(1035, 405, 120, 30, "Vertical Offset");
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset->box(FL_FLAT_BOX);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset->color((Fl_Color)53);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset->selection_color((Fl_Color)53);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset->labeltype(FL_NORMAL_LABEL);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset->labelfont(0);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset->labelsize(14);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset->labelcolor(FL_FOREGROUND_COLOR);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset->callback((Fl_Callback*)cb_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset, (void*)(1));
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset->when(FL_WHEN_RELEASE);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset->menu(menu_oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
            oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_0_vertical_offset->input ()->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
          } // LABSoft_GUI_Fl_Input_Choice_With_Scroll* oscilloscope_labsoft_gui_fl_input_choice_with_scroll_channel_1_vertical_offset
          oscilloscope_fl_group_vertical_channel_1->end();
        } // Fl_Group* oscilloscope_fl_group_vertical_channel_1
        { oscilloscope_fl_group_horizontal = new Fl_Group(845, 480, 160, 240, "Horizontal");
          oscilloscope_fl_group_horizontal->box(FL_ROUNDED_FRAME);
          oscilloscope_fl_group_horizontal->color(FL_LIGHT2);
          { oscilloscope_fl_input_choice_horizontal_offset = new Fl_Input_Choice(865, 510, 120, 30, "Horizontal Offset");
            oscilloscope_fl_input_choice_horizontal_offset->box(FL_FLAT_BOX);
            oscilloscope_fl_input_choice_horizontal_offset->color((Fl_Color)53);
            oscilloscope_fl_input_choice_horizontal_offset->selection_color((Fl_Color)53);
            oscilloscope_fl_input_choice_horizontal_offset->callback((Fl_Callback*)cb_oscilloscope_fl_input_choice_horizontal_offset);
            oscilloscope_fl_input_choice_horizontal_offset->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_input_choice_horizontal_offset->menu(menu_oscilloscope_fl_input_choice_horizontal_offset);
            oscilloscope_fl_input_choice_horizontal_offset->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
            oscilloscope_fl_input_choice_horizontal_offset->input ()->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_horizontal_offset
          { oscilloscope_fl_input_choice_time_per_division = new Fl_Input_Choice(865, 565, 120, 30, "Time per Division");
            oscilloscope_fl_input_choice_time_per_division->box(FL_FLAT_BOX);
            oscilloscope_fl_input_choice_time_per_division->color((Fl_Color)53);
            oscilloscope_fl_input_choice_time_per_division->selection_color((Fl_Color)53);
            oscilloscope_fl_input_choice_time_per_division->callback((Fl_Callback*)cb_oscilloscope_fl_input_choice_time_per_division);
            oscilloscope_fl_input_choice_time_per_division->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_input_choice_time_per_division->menu(menu_oscilloscope_fl_input_choice_time_per_division);
            oscilloscope_fl_input_choice_time_per_division->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
            oscilloscope_fl_input_choice_time_per_division->input ()->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_time_per_division
          { oscilloscope_fl_input_choice_samples = new Fl_Input_Choice(865, 620, 120, 30, "Samples");
            oscilloscope_fl_input_choice_samples->box(FL_FLAT_BOX);
            oscilloscope_fl_input_choice_samples->color((Fl_Color)53);
            oscilloscope_fl_input_choice_samples->selection_color((Fl_Color)53);
            oscilloscope_fl_input_choice_samples->callback((Fl_Callback*)cb_oscilloscope_fl_input_choice_samples);
            oscilloscope_fl_input_choice_samples->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_input_choice_samples->menu(menu_oscilloscope_fl_input_choice_samples);
            oscilloscope_fl_input_choice_samples->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
            oscilloscope_fl_input_choice_samples->input ()->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_samples
          { oscilloscope_fl_input_choice_sampling_rate = new Fl_Input_Choice(865, 675, 120, 30, "Sampling Rate");
            oscilloscope_fl_input_choice_sampling_rate->box(FL_FLAT_BOX);
            oscilloscope_fl_input_choice_sampling_rate->color((Fl_Color)53);
            oscilloscope_fl_input_choice_sampling_rate->selection_color((Fl_Color)53);
            oscilloscope_fl_input_choice_sampling_rate->callback((Fl_Callback*)cb_oscilloscope_fl_input_choice_sampling_rate);
            oscilloscope_fl_input_choice_sampling_rate->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_input_choice_sampling_rate->menu(menu_oscilloscope_fl_input_choice_sampling_rate);
            oscilloscope_fl_input_choice_sampling_rate->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
            oscilloscope_fl_input_choice_sampling_rate->input ()->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_sampling_rate
          oscilloscope_fl_group_horizontal->end();
        } // Fl_Group* oscilloscope_fl_group_horizontal
        { oscilloscope_fl_group_trigger = new Fl_Group(1015, 480, 330, 240, "Trigger");
          oscilloscope_fl_group_trigger->box(FL_ROUNDED_FRAME);
          oscilloscope_fl_group_trigger->color(FL_LIGHT2);
          { oscilloscope_fl_choice_trigger_mode = new Fl_Choice(1040, 515, 120, 30, "Mode");
            oscilloscope_fl_choice_trigger_mode->down_box(FL_BORDER_BOX);
            oscilloscope_fl_choice_trigger_mode->color((Fl_Color)53);
            oscilloscope_fl_choice_trigger_mode->selection_color((Fl_Color)53);
            oscilloscope_fl_choice_trigger_mode->callback((Fl_Callback*)cb_oscilloscope_fl_choice_trigger_mode);
            oscilloscope_fl_choice_trigger_mode->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_choice_trigger_mode->menu(menu_oscilloscope_fl_choice_trigger_mode);
          } // Fl_Choice* oscilloscope_fl_choice_trigger_mode
          { oscilloscope_fl_choice_trigger_source = new Fl_Choice(1200, 515, 120, 30, "Source");
            oscilloscope_fl_choice_trigger_source->down_box(FL_BORDER_BOX);
            oscilloscope_fl_choice_trigger_source->callback((Fl_Callback*)cb_oscilloscope_fl_choice_trigger_source);
            oscilloscope_fl_choice_trigger_source->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_choice_trigger_source->deactivate();
            oscilloscope_fl_choice_trigger_source->menu(menu_oscilloscope_fl_choice_trigger_source);
          } // Fl_Choice* oscilloscope_fl_choice_trigger_source
          { oscilloscope_fl_choice_trigger_type = new Fl_Choice(1040, 590, 120, 30, "Type");
            oscilloscope_fl_choice_trigger_type->down_box(FL_BORDER_BOX);
            oscilloscope_fl_choice_trigger_type->callback((Fl_Callback*)cb_oscilloscope_fl_choice_trigger_type);
            oscilloscope_fl_choice_trigger_type->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_choice_trigger_type->deactivate();
            oscilloscope_fl_choice_trigger_type->menu(menu_oscilloscope_fl_choice_trigger_type);
          } // Fl_Choice* oscilloscope_fl_choice_trigger_type
          { oscilloscope_fl_choice_trigger_condition = new Fl_Choice(1200, 590, 120, 30, "Condition");
            oscilloscope_fl_choice_trigger_condition->down_box(FL_BORDER_BOX);
            oscilloscope_fl_choice_trigger_condition->callback((Fl_Callback*)cb_oscilloscope_fl_choice_trigger_condition);
            oscilloscope_fl_choice_trigger_condition->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_choice_trigger_condition->deactivate();
            oscilloscope_fl_choice_trigger_condition->menu(menu_oscilloscope_fl_choice_trigger_condition);
          } // Fl_Choice* oscilloscope_fl_choice_trigger_condition
          { oscilloscope_fl_input_choice_trigger_level = new Fl_Input_Choice(1040, 660, 120, 30, "Level");
            oscilloscope_fl_input_choice_trigger_level->box(FL_FLAT_BOX);
            oscilloscope_fl_input_choice_trigger_level->color((Fl_Color)53);
            oscilloscope_fl_input_choice_trigger_level->selection_color((Fl_Color)53);
            oscilloscope_fl_input_choice_trigger_level->callback((Fl_Callback*)cb_oscilloscope_fl_input_choice_trigger_level);
            oscilloscope_fl_input_choice_trigger_level->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_input_choice_trigger_level->deactivate();
            oscilloscope_fl_input_choice_trigger_level->menu(menu_oscilloscope_fl_input_choice_trigger_level);
            oscilloscope_fl_input_choice_trigger_level->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
            oscilloscope_fl_input_choice_trigger_level->input ()->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
          } // Fl_Input_Choice* oscilloscope_fl_input_choice_trigger_level
          oscilloscope_fl_group_trigger->end();
        } // Fl_Group* oscilloscope_fl_group_trigger
        { oscilloscope_fl_group_display = new Fl_Group(1185, 279, 160, 176);
          oscilloscope_fl_group_display->box(FL_ROUNDED_FRAME);
          oscilloscope_fl_group_display->color(FL_LIGHT2);
          oscilloscope_fl_group_display->labeltype(FL_NO_LABEL);
          { oscilloscope_fl_choice_mode = new Fl_Choice(1205, 312, 120, 30, "Mode");
            oscilloscope_fl_choice_mode->down_box(FL_BORDER_BOX);
            oscilloscope_fl_choice_mode->color((Fl_Color)53);
            oscilloscope_fl_choice_mode->selection_color((Fl_Color)53);
            oscilloscope_fl_choice_mode->callback((Fl_Callback*)cb_oscilloscope_fl_choice_mode);
            oscilloscope_fl_choice_mode->align(Fl_Align(FL_ALIGN_TOP));
            oscilloscope_fl_choice_mode->menu(menu_oscilloscope_fl_choice_mode);
          } // Fl_Choice* oscilloscope_fl_choice_mode
          oscilloscope_fl_group_display->end();
        } // Fl_Group* oscilloscope_fl_group_display
        main_fl_group_oscilloscope_tab->end();
      } // Fl_Group* main_fl_group_oscilloscope_tab
      { main_fl_group_voltmeter_tab = new Fl_Group(0, 60, 1366, 708, "Voltmeter");
        main_fl_group_voltmeter_tab->color(FL_LIGHT3);
        main_fl_group_voltmeter_tab->selection_color(FL_LIGHT2);
        main_fl_group_voltmeter_tab->hide();
        { Fl_Box* o = new Fl_Box(665, 376, 35, 17, "This instrument can only measure DC voltages.");
          o->labelsize(12);
        } // Fl_Box* o
        { // 					
          voltmeter_fl_light_button_run_stop = new Fl_Light_Button(533, 450, 300, 60, "Run");
          voltmeter_fl_light_button_run_stop->box(FL_GTK_UP_BOX);
          voltmeter_fl_light_button_run_stop->color((Fl_Color)53);
          voltmeter_fl_light_button_run_stop->selection_color(FL_GREEN);
          voltmeter_fl_light_button_run_stop->labelsize(24);
          voltmeter_fl_light_button_run_stop->callback((Fl_Callback*)cb_voltmeter_fl_light_button_run_stop);
          voltmeter_fl_light_button_run_stop->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* voltmeter_fl_light_button_run_stop
        { voltmeter_fl_group_values = new Fl_Group(0, 0, 1366, 768);
          { voltmeter_fl_output_chan0_value = new Fl_Output(310, 285, 320, 60, "Channel 1 DC");
            voltmeter_fl_output_chan0_value->box(FL_GTK_DOWN_BOX);
            voltmeter_fl_output_chan0_value->color((Fl_Color)55);
            voltmeter_fl_output_chan0_value->labelsize(18);
            voltmeter_fl_output_chan0_value->textsize(48);
            voltmeter_fl_output_chan0_value->user_data((void*)(0));
            voltmeter_fl_output_chan0_value->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Output* voltmeter_fl_output_chan0_value
          { voltmeter_fl_output_chan1_value = new Fl_Output(750, 285, 320, 60, "Channel 2 DC");
            voltmeter_fl_output_chan1_value->box(FL_GTK_DOWN_BOX);
            voltmeter_fl_output_chan1_value->color((Fl_Color)55);
            voltmeter_fl_output_chan1_value->labelsize(18);
            voltmeter_fl_output_chan1_value->textsize(48);
            voltmeter_fl_output_chan1_value->user_data((void*)(1));
            voltmeter_fl_output_chan1_value->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Output* voltmeter_fl_output_chan1_value
          voltmeter_fl_group_values->end();
        } // Fl_Group* voltmeter_fl_group_values
        main_fl_group_voltmeter_tab->end();
      } // Fl_Group* main_fl_group_voltmeter_tab
      { main_fl_group_function_generator_tab = new Fl_Group(0, 60, 1366, 708, "Function Generator");
        main_fl_group_function_generator_tab->color(FL_LIGHT3);
        main_fl_group_function_generator_tab->selection_color(FL_LIGHT2);
        main_fl_group_function_generator_tab->hide();
        { function_generator_fl_choice_wave_type = new Fl_Choice(300, 140, 180, 60, "Wave Type");
          function_generator_fl_choice_wave_type->down_box(FL_BORDER_BOX);
          function_generator_fl_choice_wave_type->callback((Fl_Callback*)cb_function_generator_fl_choice_wave_type, (void*)(0));
          function_generator_fl_choice_wave_type->align(Fl_Align(FL_ALIGN_TOP));
          function_generator_fl_choice_wave_type->menu(menu_function_generator_fl_choice_wave_type);
        } // Fl_Choice* function_generator_fl_choice_wave_type
        { function_generator_fl_input_choice_amplitude = new Fl_Input_Choice(593, 140, 180, 60, "Amplitude");
          function_generator_fl_input_choice_amplitude->box(FL_FLAT_BOX);
          function_generator_fl_input_choice_amplitude->color((Fl_Color)53);
          function_generator_fl_input_choice_amplitude->selection_color((Fl_Color)53);
          function_generator_fl_input_choice_amplitude->callback((Fl_Callback*)cb_function_generator_fl_input_choice_amplitude, (void*)(0));
          function_generator_fl_input_choice_amplitude->align(Fl_Align(FL_ALIGN_TOP));
          function_generator_fl_input_choice_amplitude->menu(menu_function_generator_fl_input_choice_amplitude);
          function_generator_fl_input_choice_amplitude->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
          function_generator_fl_input_choice_amplitude->input ()->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
        } // Fl_Input_Choice* function_generator_fl_input_choice_amplitude
        { function_generator_fl_input_choice_frequency = new Fl_Input_Choice(880, 140, 180, 60, "Frequency");
          function_generator_fl_input_choice_frequency->box(FL_FLAT_BOX);
          function_generator_fl_input_choice_frequency->color((Fl_Color)53);
          function_generator_fl_input_choice_frequency->selection_color((Fl_Color)53);
          function_generator_fl_input_choice_frequency->callback((Fl_Callback*)cb_function_generator_fl_input_choice_frequency, (void*)(0));
          function_generator_fl_input_choice_frequency->align(Fl_Align(FL_ALIGN_TOP));
          function_generator_fl_input_choice_frequency->menu(menu_function_generator_fl_input_choice_frequency);
          function_generator_fl_input_choice_frequency->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
          function_generator_fl_input_choice_frequency->input ()->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
        } // Fl_Input_Choice* function_generator_fl_input_choice_frequency
        { function_generator_fl_input_choice_period = new Fl_Input_Choice(300, 240, 180, 60, "Period");
          function_generator_fl_input_choice_period->box(FL_FLAT_BOX);
          function_generator_fl_input_choice_period->color((Fl_Color)53);
          function_generator_fl_input_choice_period->selection_color((Fl_Color)53);
          function_generator_fl_input_choice_period->callback((Fl_Callback*)cb_function_generator_fl_input_choice_period, (void*)(0));
          function_generator_fl_input_choice_period->align(Fl_Align(FL_ALIGN_TOP));
          function_generator_fl_input_choice_period->menu(menu_function_generator_fl_input_choice_period);
          function_generator_fl_input_choice_period->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
          function_generator_fl_input_choice_period->input ()->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
        } // Fl_Input_Choice* function_generator_fl_input_choice_period
        { function_generator_fl_input_choice_phase = new Fl_Input_Choice(593, 240, 180, 60, "Phase");
          function_generator_fl_input_choice_phase->box(FL_FLAT_BOX);
          function_generator_fl_input_choice_phase->color((Fl_Color)53);
          function_generator_fl_input_choice_phase->selection_color((Fl_Color)53);
          function_generator_fl_input_choice_phase->callback((Fl_Callback*)cb_function_generator_fl_input_choice_phase, (void*)(0));
          function_generator_fl_input_choice_phase->align(Fl_Align(FL_ALIGN_TOP));
          function_generator_fl_input_choice_phase->menu(menu_function_generator_fl_input_choice_phase);
          function_generator_fl_input_choice_phase->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
          function_generator_fl_input_choice_phase->input ()->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
        } // Fl_Input_Choice* function_generator_fl_input_choice_phase
        { function_generator_fl_input_choice_offset = new Fl_Input_Choice(880, 240, 180, 60, "Vertical Offset");
          function_generator_fl_input_choice_offset->box(FL_FLAT_BOX);
          function_generator_fl_input_choice_offset->color((Fl_Color)53);
          function_generator_fl_input_choice_offset->selection_color((Fl_Color)53);
          function_generator_fl_input_choice_offset->callback((Fl_Callback*)cb_function_generator_fl_input_choice_offset, (void*)(0));
          function_generator_fl_input_choice_offset->align(Fl_Align(FL_ALIGN_TOP));
          function_generator_fl_input_choice_offset->menu(menu_function_generator_fl_input_choice_offset);
          function_generator_fl_input_choice_offset->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
          function_generator_fl_input_choice_offset->input ()->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
        } // Fl_Input_Choice* function_generator_fl_input_choice_offset
        { function_generator_fl_light_button_run_stop = new Fl_Light_Button(533, 450, 300, 60, "Run");
          function_generator_fl_light_button_run_stop->box(FL_GTK_UP_BOX);
          function_generator_fl_light_button_run_stop->color((Fl_Color)53);
          function_generator_fl_light_button_run_stop->selection_color(FL_GREEN);
          function_generator_fl_light_button_run_stop->labelsize(24);
          function_generator_fl_light_button_run_stop->callback((Fl_Callback*)cb_function_generator_fl_light_button_run_stop, (void*)(0));
          function_generator_fl_light_button_run_stop->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* function_generator_fl_light_button_run_stop
        main_fl_group_function_generator_tab->end();
      } // Fl_Group* main_fl_group_function_generator_tab
      { main_fl_group_logic_analyzer_tab = new Fl_Group(0, 60, 1366, 708, "Logic Analyzer");
        main_fl_group_logic_analyzer_tab->color(FL_LIGHT3);
        main_fl_group_logic_analyzer_tab->selection_color(FL_LIGHT2);
        main_fl_group_logic_analyzer_tab->hide();
        { logic_analyzer_fl_light_button_run_stop = new Fl_Light_Button(50, 84, 120, 60, "Run");
          logic_analyzer_fl_light_button_run_stop->box(FL_GTK_UP_BOX);
          logic_analyzer_fl_light_button_run_stop->color((Fl_Color)53);
          logic_analyzer_fl_light_button_run_stop->selection_color(FL_GREEN);
          logic_analyzer_fl_light_button_run_stop->callback((Fl_Callback*)cb_logic_analyzer_fl_light_button_run_stop);
          logic_analyzer_fl_light_button_run_stop->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* logic_analyzer_fl_light_button_run_stop
        { logic_analyzer_fl_input_choice_memory_depth = new Fl_Input_Choice(200, 100, 120, 30, "Memory Depth");
          logic_analyzer_fl_input_choice_memory_depth->box(FL_FLAT_BOX);
          logic_analyzer_fl_input_choice_memory_depth->color((Fl_Color)53);
          logic_analyzer_fl_input_choice_memory_depth->selection_color((Fl_Color)53);
          logic_analyzer_fl_input_choice_memory_depth->callback((Fl_Callback*)cb_logic_analyzer_fl_input_choice_memory_depth);
          logic_analyzer_fl_input_choice_memory_depth->align(Fl_Align(FL_ALIGN_TOP));
          logic_analyzer_fl_input_choice_memory_depth->deactivate();
          logic_analyzer_fl_input_choice_memory_depth->menu(menu_logic_analyzer_fl_input_choice_memory_depth);
        } // Fl_Input_Choice* logic_analyzer_fl_input_choice_memory_depth
        { logic_analyzer_fl_input_choice_sampling_rate = new Fl_Input_Choice(350, 100, 120, 30, "Sampling Rate");
          logic_analyzer_fl_input_choice_sampling_rate->box(FL_FLAT_BOX);
          logic_analyzer_fl_input_choice_sampling_rate->color((Fl_Color)53);
          logic_analyzer_fl_input_choice_sampling_rate->selection_color((Fl_Color)53);
          logic_analyzer_fl_input_choice_sampling_rate->callback((Fl_Callback*)cb_logic_analyzer_fl_input_choice_sampling_rate);
          logic_analyzer_fl_input_choice_sampling_rate->align(Fl_Align(FL_ALIGN_TOP));
          logic_analyzer_fl_input_choice_sampling_rate->menu(menu_logic_analyzer_fl_input_choice_sampling_rate);
        } // Fl_Input_Choice* logic_analyzer_fl_input_choice_sampling_rate
        { logic_analyzer_fl_input_choice_time_per_division = new Fl_Input_Choice(500, 100, 120, 30, "Time per Division");
          logic_analyzer_fl_input_choice_time_per_division->callback((Fl_Callback*)cb_logic_analyzer_fl_input_choice_time_per_division);
          logic_analyzer_fl_input_choice_time_per_division->align(Fl_Align(FL_ALIGN_TOP));
          logic_analyzer_fl_input_choice_time_per_division->menu(menu_logic_analyzer_fl_input_choice_time_per_division);
        } // Fl_Input_Choice* logic_analyzer_fl_input_choice_time_per_division
        { logic_analyzer_fl_input_choice_position = new Fl_Input_Choice(650, 100, 120, 30, "Position");
          logic_analyzer_fl_input_choice_position->callback((Fl_Callback*)cb_logic_analyzer_fl_input_choice_position);
          logic_analyzer_fl_input_choice_position->align(Fl_Align(FL_ALIGN_TOP));
          logic_analyzer_fl_input_choice_position->deactivate();
          logic_analyzer_fl_input_choice_position->menu(menu_logic_analyzer_fl_input_choice_position);
        } // Fl_Input_Choice* logic_analyzer_fl_input_choice_position
        { logic_analyzer_fl_choice_display_mode = new Fl_Choice(800, 100, 120, 30, "Display Mode");
          logic_analyzer_fl_choice_display_mode->down_box(FL_BORDER_BOX);
          logic_analyzer_fl_choice_display_mode->callback((Fl_Callback*)cb_logic_analyzer_fl_choice_display_mode);
          logic_analyzer_fl_choice_display_mode->align(Fl_Align(FL_ALIGN_TOP));
          logic_analyzer_fl_choice_display_mode->menu(menu_logic_analyzer_fl_choice_display_mode);
        } // Fl_Choice* logic_analyzer_fl_choice_display_mode
        { logic_analyzer_labsoft_logic_analyzer_display_group_display = new LABSoft_GUI_Logic_Analyzer_Display_Group(43, 180, 1280, 540);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->box(FL_DOWN_BOX);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->color(FL_BACKGROUND2_COLOR);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->selection_color(FL_BACKGROUND_COLOR);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->labeltype(FL_NORMAL_LABEL);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->labelfont(0);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->labelsize(14);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->labelcolor(FL_FOREGROUND_COLOR);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->align(Fl_Align(FL_ALIGN_TOP));
          logic_analyzer_labsoft_logic_analyzer_display_group_display->when(FL_WHEN_RELEASE);
          logic_analyzer_labsoft_logic_analyzer_display_group_display->end();
        } // LABSoft_GUI_Logic_Analyzer_Display_Group* logic_analyzer_labsoft_logic_analyzer_display_group_display
        main_fl_group_logic_analyzer_tab->end();
      } // Fl_Group* main_fl_group_logic_analyzer_tab
      { main_fl_group_circuit_checker_tab = new Fl_Group(0, 60, 1366, 708, "Analog Circuit Checker");
        main_fl_group_circuit_checker_tab->color(FL_LIGHT3);
        main_fl_group_circuit_checker_tab->selection_color(FL_LIGHT2);
        main_fl_group_circuit_checker_tab->hide();
        main_fl_group_circuit_checker_tab->deactivate();
        { circuit_checker_fl_button_choose_circuit_checker_file = new Fl_Button(203, 180, 300, 120, "Choose Circuit   Checker File");
          circuit_checker_fl_button_choose_circuit_checker_file->box(FL_GTK_UP_BOX);
          circuit_checker_fl_button_choose_circuit_checker_file->color((Fl_Color)53);
          circuit_checker_fl_button_choose_circuit_checker_file->labelsize(24);
          circuit_checker_fl_button_choose_circuit_checker_file->callback((Fl_Callback*)cb_circuit_checker_fl_button_choose_circuit_checker_file);
          circuit_checker_fl_button_choose_circuit_checker_file->align(Fl_Align(FL_ALIGN_WRAP));
        } // Fl_Button* circuit_checker_fl_button_choose_circuit_checker_file
        { circuit_checker_fl_button_start_circuit_checking = new Fl_Button(533, 180, 300, 120, "Start Circuit Checking");
          circuit_checker_fl_button_start_circuit_checking->box(FL_GTK_UP_BOX);
          circuit_checker_fl_button_start_circuit_checking->color((Fl_Color)53);
          circuit_checker_fl_button_start_circuit_checking->labelsize(24);
          circuit_checker_fl_button_start_circuit_checking->callback((Fl_Callback*)cb_circuit_checker_fl_button_start_circuit_checking);
        } // Fl_Button* circuit_checker_fl_button_start_circuit_checking
        { circuit_checker_fl_output_selected_circuit_checker_file = new Fl_Output(863, 160, 300, 60, "Selected Circuit Checker File");
          circuit_checker_fl_output_selected_circuit_checker_file->box(FL_GTK_DOWN_BOX);
          circuit_checker_fl_output_selected_circuit_checker_file->color((Fl_Color)55);
          circuit_checker_fl_output_selected_circuit_checker_file->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Output* circuit_checker_fl_output_selected_circuit_checker_file
        { circuit_checker_fl_output_similarity_score = new Fl_Output(863, 250, 300, 60, "Similarity Score");
          circuit_checker_fl_output_similarity_score->box(FL_GTK_DOWN_BOX);
          circuit_checker_fl_output_similarity_score->color((Fl_Color)55);
          circuit_checker_fl_output_similarity_score->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Output* circuit_checker_fl_output_similarity_score
        { circuit_checker_fl_text_display_logger = new Fl_Text_Display(203, 340, 960, 240);
          circuit_checker_fl_text_display_logger->box(FL_GTK_DOWN_BOX);
          circuit_checker_fl_text_display_logger->color((Fl_Color)55);
        } // Fl_Text_Display* circuit_checker_fl_text_display_logger
        main_fl_group_circuit_checker_tab->end();
      } // Fl_Group* main_fl_group_circuit_checker_tab
      { main_fl_group_digital_circuit_checker_tab = new Fl_Group(0, 60, 1366, 708, "Digital Circuit Checker");
        main_fl_group_digital_circuit_checker_tab->color(FL_LIGHT3);
        main_fl_group_digital_circuit_checker_tab->selection_color(FL_LIGHT2);
        main_fl_group_digital_circuit_checker_tab->hide();
        { Fl_Group* o = new Fl_Group(40, 100, 210, 300);
          o->box(FL_ROUNDED_FRAME);
          { digital_circuit_checker_fl_button_load_file = new Fl_Button(70, 120, 150, 60, "Load File");
            digital_circuit_checker_fl_button_load_file->box(FL_GTK_UP_BOX);
            digital_circuit_checker_fl_button_load_file->color((Fl_Color)53);
            digital_circuit_checker_fl_button_load_file->callback((Fl_Callback*)cb_digital_circuit_checker_fl_button_load_file);
            digital_circuit_checker_fl_button_load_file->align(Fl_Align(FL_ALIGN_WRAP));
          } // Fl_Button* digital_circuit_checker_fl_button_load_file
          { digital_circuit_checker_fl_output_selected_file = new Fl_Output(70, 205, 150, 30, "Selected File");
            digital_circuit_checker_fl_output_selected_file->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Output* digital_circuit_checker_fl_output_selected_file
          { digital_circuit_checker_fl_button_unload_file = new Fl_Button(70, 250, 150, 60, "Unload File");
            digital_circuit_checker_fl_button_unload_file->box(FL_GTK_UP_BOX);
            digital_circuit_checker_fl_button_unload_file->color((Fl_Color)53);
            digital_circuit_checker_fl_button_unload_file->callback((Fl_Callback*)cb_digital_circuit_checker_fl_button_unload_file);
            digital_circuit_checker_fl_button_unload_file->align(Fl_Align(FL_ALIGN_WRAP));
          } // Fl_Button* digital_circuit_checker_fl_button_unload_file
          { digital_circuit_checker_fl_button_run_checker = new Fl_Button(70, 320, 150, 60, "Run Checker");
            digital_circuit_checker_fl_button_run_checker->box(FL_GTK_UP_BOX);
            digital_circuit_checker_fl_button_run_checker->color((Fl_Color)53);
            digital_circuit_checker_fl_button_run_checker->callback((Fl_Callback*)cb_digital_circuit_checker_fl_button_run_checker);
            digital_circuit_checker_fl_button_run_checker->align(Fl_Align(FL_ALIGN_WRAP));
          } // Fl_Button* digital_circuit_checker_fl_button_run_checker
          o->end();
        } // Fl_Group* o
        { digital_circuit_checker_labchecker_gui_digital_output_table_table = new LABSoft_GUI_LABChecker_Digital_Output_Table(285, 100, 1040, 539, "Input/Output Table");
          digital_circuit_checker_labchecker_gui_digital_output_table_table->box(FL_THIN_DOWN_FRAME);
          digital_circuit_checker_labchecker_gui_digital_output_table_table->color(FL_LIGHT2);
          digital_circuit_checker_labchecker_gui_digital_output_table_table->selection_color(FL_BACKGROUND_COLOR);
          digital_circuit_checker_labchecker_gui_digital_output_table_table->labeltype(FL_NORMAL_LABEL);
          digital_circuit_checker_labchecker_gui_digital_output_table_table->labelfont(0);
          digital_circuit_checker_labchecker_gui_digital_output_table_table->labelsize(14);
          digital_circuit_checker_labchecker_gui_digital_output_table_table->labelcolor(FL_FOREGROUND_COLOR);
          digital_circuit_checker_labchecker_gui_digital_output_table_table->align(Fl_Align(FL_ALIGN_TOP));
          digital_circuit_checker_labchecker_gui_digital_output_table_table->when(FL_WHEN_RELEASE);
          digital_circuit_checker_labchecker_gui_digital_output_table_table->end();
        } // LABSoft_GUI_LABChecker_Digital_Output_Table* digital_circuit_checker_labchecker_gui_digital_output_table_table
        { Fl_Group* o = new Fl_Group(40, 430, 210, 208);
          o->box(FL_ROUNDED_FRAME);
          { digital_circuit_checker_fl_output_results = new Fl_Output(70, 460, 150, 30, "Results");
            digital_circuit_checker_fl_output_results->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Output* digital_circuit_checker_fl_output_results
          { digital_circuit_checker_fl_button_export_results = new Fl_Button(70, 555, 150, 60, "Export Results");
            digital_circuit_checker_fl_button_export_results->box(FL_GTK_UP_BOX);
            digital_circuit_checker_fl_button_export_results->color((Fl_Color)53);
            digital_circuit_checker_fl_button_export_results->align(Fl_Align(FL_ALIGN_WRAP));
          } // Fl_Button* digital_circuit_checker_fl_button_export_results
          o->end();
        } // Fl_Group* o
        main_fl_group_digital_circuit_checker_tab->end();
      } // Fl_Group* main_fl_group_digital_circuit_checker_tab
      { main_fl_group_labchecker_digital = new Fl_Group(0, 60, 1366, 708, "LABChecker - Digital");
        main_fl_group_labchecker_digital->color(FL_LIGHT3);
        main_fl_group_labchecker_digital->hide();
        { Fl_Group* o = new Fl_Group(60, 120, 180, 240, "Settings");
          o->box(FL_ROUNDED_FRAME);
          { digital_fl_choice_input_bits = new Fl_Choice(95, 160, 120, 30, "Input Bits");
            digital_fl_choice_input_bits->down_box(FL_BORDER_BOX);
            digital_fl_choice_input_bits->callback((Fl_Callback*)cb_digital_fl_choice_input_bits);
            digital_fl_choice_input_bits->align(Fl_Align(FL_ALIGN_TOP));
            digital_fl_choice_input_bits->menu(menu_digital_fl_choice_input_bits);
          } // Fl_Choice* digital_fl_choice_input_bits
          { // 		
            digital_fl_choice_output_bits = new Fl_Choice(95, 230, 120, 30, "Output Bits");
            digital_fl_choice_output_bits->down_box(FL_BORDER_BOX);
            digital_fl_choice_output_bits->callback((Fl_Callback*)cb_digital_fl_choice_output_bits);
            digital_fl_choice_output_bits->align(Fl_Align(FL_ALIGN_TOP));
            digital_fl_choice_output_bits->menu(menu_digital_fl_choice_output_bits);
          } // Fl_Choice* digital_fl_choice_output_bits
          { digital_fl_input_output_count = new Fl_Input(95, 305, 120, 30, "Outputs (Max 2)");
            digital_fl_input_output_count->callback((Fl_Callback*)cb_digital_fl_input_output_count);
            digital_fl_input_output_count->align(Fl_Align(FL_ALIGN_TOP));
            digital_fl_input_output_count->when (FL_WHEN_RELEASE | FL_WHEN_ENTER_KEY);
          } // Fl_Input* digital_fl_input_output_count
          o->end();
        } // Fl_Group* o
        { digital_fl_button_create_file = new Fl_Button(608, 650, 150, 60, "Create File");
          digital_fl_button_create_file->box(FL_GTK_UP_BOX);
          digital_fl_button_create_file->color((Fl_Color)55);
          digital_fl_button_create_file->callback((Fl_Callback*)cb_digital_fl_button_create_file);
        } // Fl_Button* digital_fl_button_create_file
        { labchecker_digital_labsoft_gui_labchecker_digital_input_table_table = new LABSoft_GUI_LABChecker_Digital_Input_Table(290, 118, 1020, 500, "Outputs");
          labchecker_digital_labsoft_gui_labchecker_digital_input_table_table->box(FL_THIN_DOWN_FRAME);
          labchecker_digital_labsoft_gui_labchecker_digital_input_table_table->color((Fl_Color)51);
          labchecker_digital_labsoft_gui_labchecker_digital_input_table_table->selection_color((Fl_Color)53);
          labchecker_digital_labsoft_gui_labchecker_digital_input_table_table->labeltype(FL_NORMAL_LABEL);
          labchecker_digital_labsoft_gui_labchecker_digital_input_table_table->labelfont(0);
          labchecker_digital_labsoft_gui_labchecker_digital_input_table_table->labelsize(14);
          labchecker_digital_labsoft_gui_labchecker_digital_input_table_table->labelcolor(FL_FOREGROUND_COLOR);
          labchecker_digital_labsoft_gui_labchecker_digital_input_table_table->align(Fl_Align(FL_ALIGN_TOP));
          labchecker_digital_labsoft_gui_labchecker_digital_input_table_table->when(FL_WHEN_RELEASE);
          labchecker_digital_labsoft_gui_labchecker_digital_input_table_table->end();
        } // LABSoft_GUI_LABChecker_Digital_Input_Table* labchecker_digital_labsoft_gui_labchecker_digital_input_table_table
        main_fl_group_labchecker_digital->end();
      } // Fl_Group* main_fl_group_labchecker_digital
      main_fl_tabs->end();
    } // Fl_Tabs* main_fl_tabs
    main_fl_window->end();
  } // Fl_Double_Window* main_fl_window
  { oscilloscope_fl_window_record_config = new Fl_Double_Window(360, 300, "Record Configuration");
    oscilloscope_fl_window_record_config->user_data((void*)(this));
    { oscilloscope_fl_group_record_config = new Fl_Group(0, 0, 360, 300);
      oscilloscope_fl_group_record_config->box(FL_UP_BOX);
      oscilloscope_fl_group_record_config->color(FL_LIGHT3);
      { Fl_Choice* o = new Fl_Choice(190, 20, 120, 30, "Samples:                  ");
        o->down_box(FL_BORDER_BOX);
        o->menu(menu_Samples);
      } // Fl_Choice* o
      { Fl_Choice* o = new Fl_Choice(190, 65, 120, 30, "Sampling Rate:       ");
        o->down_box(FL_BORDER_BOX);
      } // Fl_Choice* o
      { Fl_Choice* o = new Fl_Choice(190, 110, 120, 30, "Time per Division:  ");
        o->down_box(FL_BORDER_BOX);
      } // Fl_Choice* o
      { Fl_Choice* o = new Fl_Choice(190, 155, 120, 30, "Trigger:                    ");
        o->down_box(FL_BORDER_BOX);
        o->deactivate();
      } // Fl_Choice* o
      { oscilloscope_fl_button_record_config_start = new Fl_Button(40, 210, 120, 60, "Start");
        oscilloscope_fl_button_record_config_start->box(FL_GTK_UP_BOX);
        oscilloscope_fl_button_record_config_start->color((Fl_Color)53);
        oscilloscope_fl_button_record_config_start->callback((Fl_Callback*)cb_oscilloscope_fl_button_record_config_start);
      } // Fl_Button* oscilloscope_fl_button_record_config_start
      { oscilloscope_fl_button_record_config_cancel = new Fl_Button(200, 210, 120, 60, "Cancel");
        oscilloscope_fl_button_record_config_cancel->box(FL_GTK_UP_BOX);
        oscilloscope_fl_button_record_config_cancel->color((Fl_Color)53);
        oscilloscope_fl_button_record_config_cancel->callback((Fl_Callback*)cb_oscilloscope_fl_button_record_config_cancel);
      } // Fl_Button* oscilloscope_fl_button_record_config_cancel
      oscilloscope_fl_group_record_config->end();
    } // Fl_Group* oscilloscope_fl_group_record_config
    oscilloscope_fl_window_record_config->end();
  } // Fl_Double_Window* oscilloscope_fl_window_record_config
  { oscilloscope_fl_window_export = new Fl_Double_Window(720, 420, "Oscilloscope - Export");
    oscilloscope_fl_window_export->color(FL_LIGHT3);
    oscilloscope_fl_window_export->user_data((void*)(this));
    { Fl_Choice* o = new Fl_Choice(25, 30, 300, 30, "Source:");
      o->down_box(FL_BORDER_BOX);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      o->menu(menu_Source);
    } // Fl_Choice* o
    { Fl_Group* o = new Fl_Group(25, 90, 300, 251, "Options");
      o->box(FL_ROUNDED_FRAME);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { Fl_Check_Button* o = new Fl_Check_Button(45, 110, 70, 15, "Comments");
        o->down_box(FL_GTK_DOWN_BOX);
        o->color(FL_LIGHT3);
      } // Fl_Check_Button* o
      { Fl_Check_Button* o = new Fl_Check_Button(45, 140, 70, 15, "Headers");
        o->down_box(FL_GTK_DOWN_BOX);
        o->color(FL_LIGHT3);
      } // Fl_Check_Button* o
      o->end();
    } // Fl_Group* o
    { oscilloscope_export_fl_group_output = new Fl_Group(350, 30, 340, 310);
      oscilloscope_export_fl_group_output->box(FL_BORDER_FRAME);
      oscilloscope_export_fl_group_output->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { Fl_Text_Display* o = new Fl_Text_Display(353, 33, 334, 100);
        o->box(FL_FLAT_BOX);
      } // Fl_Text_Display* o
      oscilloscope_export_fl_group_output->end();
    } // Fl_Group* oscilloscope_export_fl_group_output
    { oscilloscope_export_fl_button_copy_to_clipboard = new Fl_Button(25, 360, 300, 30, "Copy to Clipboard");
      oscilloscope_export_fl_button_copy_to_clipboard->box(FL_GTK_UP_BOX);
      oscilloscope_export_fl_button_copy_to_clipboard->color((Fl_Color)55);
    } // Fl_Button* oscilloscope_export_fl_button_copy_to_clipboard
    { oscilloscope_export_fl_button_save = new Fl_Button(490, 360, 90, 30, "Save");
      oscilloscope_export_fl_button_save->box(FL_GTK_UP_BOX);
      oscilloscope_export_fl_button_save->color((Fl_Color)55);
    } // Fl_Button* oscilloscope_export_fl_button_save
    { oscilloscope_export_fl_button_cancel = new Fl_Button(600, 360, 90, 30, "Cancel");
      oscilloscope_export_fl_button_cancel->box(FL_GTK_UP_BOX);
      oscilloscope_export_fl_button_cancel->color((Fl_Color)55);
    } // Fl_Button* oscilloscope_export_fl_button_cancel
    oscilloscope_fl_window_export->end();
  } // Fl_Double_Window* oscilloscope_fl_window_export
  { main_fl_window_about = new Fl_Double_Window(420, 300, "LABSoft");
    main_fl_window_about->color(FL_LIGHT3);
    main_fl_window_about->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(192, 70, 35, 0, "LABSoft");
      o->labelfont(1);
      o->labelsize(70);
      o->labelcolor((Fl_Color)220);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(210, 110, 0, 0, "Lab in a Box Companion App");
      o->labelsize(16);
      o->labelcolor((Fl_Color)34);
    } // Fl_Box* o
    { new Fl_Box(192, 180, 35, 0, "Version 1.0 | For Raspberry Pi Zero");
    } // Fl_Box* o
    { new Fl_Box(210, 200, 0, 0, "Contact: glenbenatiro@@gmail.com");
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(310, 250, 90, 30, "Close");
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)53);
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    main_fl_window_about->end();
  } // Fl_Double_Window* main_fl_window_about
}
